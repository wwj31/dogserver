// Code generated by excelExoprt. DO NOT EDIT.
// source. 测试.xlsx

package config

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _TestMap = map[int64]*Test{}
var _TestArray = []*Test{}

type Test struct {
	data *_Test
}

// 类型结构
type _Test struct {
	Id     int64       // ID
	Test1  string      // 测试字段1
	Test2  int64       // 者是个
	Test4  int2int     // 飞机我
	Test5  int2str     // 分解为
	Test6  str2int     // 附件
	Test7  str2str     // 夫君
	Test8  array_int   // 额外i吧
	Test9  array_str   // 非飞机
	Test10 float32     // 飞机我附件二
	Test11 array_float // 附件
}

//ID
func (c *Test) Id() int64 { return c.data.Id }

//测试字段1
func (c *Test) Test1() string { return c.data.Test1 }

//者是个
func (c *Test) Test2() int64 { return c.data.Test2 }

//飞机我
func (c *Test) LenTest4() int                                { return c.data.Test4.Len() }
func (c *Test) Test4(key int64) (int64, bool)                { return c.data.Test4.Get(key) }
func (c *Test) RangeTest4(fn func(int64, int64) (stop bool)) { c.data.Test4.Range(fn) }
func (c *Test) CopyTest4() int2int                           { return c.data.Test4.Copy() }

//分解为
func (c *Test) LenTest5() int                                 { return c.data.Test5.Len() }
func (c *Test) Test5(key int64) (string, bool)                { return c.data.Test5.Get(key) }
func (c *Test) RangeTest5(fn func(int64, string) (stop bool)) { c.data.Test5.Range(fn) }
func (c *Test) CopyTest5() int2str                            { return c.data.Test5.Copy() }

//附件
func (c *Test) LenTest6() int                                 { return c.data.Test6.Len() }
func (c *Test) Test6(key string) (int64, bool)                { return c.data.Test6.Get(key) }
func (c *Test) RangeTest6(fn func(string, int64) (stop bool)) { c.data.Test6.Range(fn) }
func (c *Test) CopyTest6() str2int                            { return c.data.Test6.Copy() }

//夫君
func (c *Test) LenTest7() int                                  { return c.data.Test7.Len() }
func (c *Test) Test7(key string) (string, bool)                { return c.data.Test7.Get(key) }
func (c *Test) RangeTest7(fn func(string, string) (stop bool)) { c.data.Test7.Range(fn) }
func (c *Test) CopyTest7() str2str                             { return c.data.Test7.Copy() }

//额外i吧
func (c *Test) LenTest8() int                              { return c.data.Test8.Len() }
func (c *Test) Test8(key int) (int64, bool)                { return c.data.Test8.Get(key) }
func (c *Test) RangeTest8(fn func(int, int64) (stop bool)) { c.data.Test8.Range(fn) }
func (c *Test) CopyTest8() array_int                       { return c.data.Test8.Copy() }

//非飞机
func (c *Test) LenTest9() int                               { return c.data.Test9.Len() }
func (c *Test) Test9(key int) (string, bool)                { return c.data.Test9.Get(key) }
func (c *Test) RangeTest9(fn func(int, string) (stop bool)) { c.data.Test9.Range(fn) }
func (c *Test) CopyTest9() array_str                        { return c.data.Test9.Copy() }

//飞机我附件二
func (c *Test) Test10() float32 { return c.data.Test10 }

//附件
func (c *Test) LenTest11() int                                { return c.data.Test11.Len() }
func (c *Test) Test11(key int) (float32, bool)                { return c.data.Test11.Get(key) }
func (c *Test) RangeTest11(fn func(int, float32) (stop bool)) { c.data.Test11.Range(fn) }
func (c *Test) CopyTest11() array_float                       { return c.data.Test11.Copy() }

func HasTest(key int64) bool {
	_, ok := _TestMap[key]
	return ok
}

func GetTest(key int64) *Test {
	return _TestMap[key]
}

func RangeTest(fn func(i int, row *Test) (stop bool)) {
	for i, row := range _TestArray {
		if fn(i, row) {
			break
		}
	}
}

func LenTest() int { return len(_TestArray) }

func init() {
	loadFn["Test"] = loadTest
}

func loadTest(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "Test.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_Test{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := make([]*Test, 0, len(datas))
	result_map := make(map[int64]*Test, len(datas))
	for _, row := range datas {
		data := &Test{data: row}
		result_array = append(result_array, data)
		result_map[row.Id] = data
	}
	_TestArray = result_array
	_TestMap = result_map
	fmt.Printf("%-50v len:%v\n", "Test load finish! ", len(result_array))
	return nil
}
