// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alliance.proto

package inner

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 通知在线玩家actor联盟信息变化
type AllianceInfoNtf struct {
	OpShortId  int64 `protobuf:"varint,1,opt,name=OpShortId,proto3" json:"OpShortId,omitempty"`
	AllianceId int32 `protobuf:"varint,2,opt,name=AllianceId,proto3" json:"AllianceId,omitempty"`
	Position   int32 `protobuf:"varint,3,opt,name=Position,proto3" json:"Position,omitempty"`
}

func (m *AllianceInfoNtf) Reset()         { *m = AllianceInfoNtf{} }
func (m *AllianceInfoNtf) String() string { return proto.CompactTextString(m) }
func (*AllianceInfoNtf) ProtoMessage()    {}
func (*AllianceInfoNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{0}
}
func (m *AllianceInfoNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllianceInfoNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllianceInfoNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllianceInfoNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllianceInfoNtf.Merge(m, src)
}
func (m *AllianceInfoNtf) XXX_Size() int {
	return m.Size()
}
func (m *AllianceInfoNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_AllianceInfoNtf.DiscardUnknown(m)
}

var xxx_messageInfo_AllianceInfoNtf proto.InternalMessageInfo

func (m *AllianceInfoNtf) GetOpShortId() int64 {
	if m != nil {
		return m.OpShortId
	}
	return 0
}

func (m *AllianceInfoNtf) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *AllianceInfoNtf) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// 创建联盟
type CreateAllianceReq struct {
	MasterShortId int64 `protobuf:"varint,1,opt,name=MasterShortId,proto3" json:"MasterShortId,omitempty"`
}

func (m *CreateAllianceReq) Reset()         { *m = CreateAllianceReq{} }
func (m *CreateAllianceReq) String() string { return proto.CompactTextString(m) }
func (*CreateAllianceReq) ProtoMessage()    {}
func (*CreateAllianceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{1}
}
func (m *CreateAllianceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAllianceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAllianceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAllianceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAllianceReq.Merge(m, src)
}
func (m *CreateAllianceReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAllianceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAllianceReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAllianceReq proto.InternalMessageInfo

func (m *CreateAllianceReq) GetMasterShortId() int64 {
	if m != nil {
		return m.MasterShortId
	}
	return 0
}

type CreateAllianceRsp struct {
	AllianceId int32 `protobuf:"varint,1,opt,name=AllianceId,proto3" json:"AllianceId,omitempty"`
}

func (m *CreateAllianceRsp) Reset()         { *m = CreateAllianceRsp{} }
func (m *CreateAllianceRsp) String() string { return proto.CompactTextString(m) }
func (*CreateAllianceRsp) ProtoMessage()    {}
func (*CreateAllianceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{2}
}
func (m *CreateAllianceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAllianceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAllianceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAllianceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAllianceRsp.Merge(m, src)
}
func (m *CreateAllianceRsp) XXX_Size() int {
	return m.Size()
}
func (m *CreateAllianceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAllianceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAllianceRsp proto.InternalMessageInfo

func (m *CreateAllianceRsp) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

// 解散联盟
type DisbandAllianceReq struct {
	RID        string `protobuf:"bytes,1,opt,name=RID,proto3" json:"RID,omitempty"`
	AllianceId int32  `protobuf:"varint,2,opt,name=AllianceId,proto3" json:"AllianceId,omitempty"`
}

func (m *DisbandAllianceReq) Reset()         { *m = DisbandAllianceReq{} }
func (m *DisbandAllianceReq) String() string { return proto.CompactTextString(m) }
func (*DisbandAllianceReq) ProtoMessage()    {}
func (*DisbandAllianceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{3}
}
func (m *DisbandAllianceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisbandAllianceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisbandAllianceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisbandAllianceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisbandAllianceReq.Merge(m, src)
}
func (m *DisbandAllianceReq) XXX_Size() int {
	return m.Size()
}
func (m *DisbandAllianceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DisbandAllianceReq.DiscardUnknown(m)
}

var xxx_messageInfo_DisbandAllianceReq proto.InternalMessageInfo

func (m *DisbandAllianceReq) GetRID() string {
	if m != nil {
		return m.RID
	}
	return ""
}

func (m *DisbandAllianceReq) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

type DisbandAllianceRsp struct {
}

func (m *DisbandAllianceRsp) Reset()         { *m = DisbandAllianceRsp{} }
func (m *DisbandAllianceRsp) String() string { return proto.CompactTextString(m) }
func (*DisbandAllianceRsp) ProtoMessage()    {}
func (*DisbandAllianceRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{4}
}
func (m *DisbandAllianceRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisbandAllianceRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisbandAllianceRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisbandAllianceRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisbandAllianceRsp.Merge(m, src)
}
func (m *DisbandAllianceRsp) XXX_Size() int {
	return m.Size()
}
func (m *DisbandAllianceRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DisbandAllianceRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DisbandAllianceRsp proto.InternalMessageInfo

// 设置成员信息
type AddMemberReq struct {
	Player   *PlayerInfo `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	Position int32       `protobuf:"varint,2,opt,name=Position,proto3" json:"Position,omitempty"`
	Ntf      bool        `protobuf:"varint,3,opt,name=Ntf,proto3" json:"Ntf,omitempty"`
}

func (m *AddMemberReq) Reset()         { *m = AddMemberReq{} }
func (m *AddMemberReq) String() string { return proto.CompactTextString(m) }
func (*AddMemberReq) ProtoMessage()    {}
func (*AddMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{5}
}
func (m *AddMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberReq.Merge(m, src)
}
func (m *AddMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberReq proto.InternalMessageInfo

func (m *AddMemberReq) GetPlayer() *PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *AddMemberReq) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *AddMemberReq) GetNtf() bool {
	if m != nil {
		return m.Ntf
	}
	return false
}

type AddMemberRsp struct {
}

func (m *AddMemberRsp) Reset()         { *m = AddMemberRsp{} }
func (m *AddMemberRsp) String() string { return proto.CompactTextString(m) }
func (*AddMemberRsp) ProtoMessage()    {}
func (*AddMemberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{6}
}
func (m *AddMemberRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMemberRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMemberRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMemberRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberRsp.Merge(m, src)
}
func (m *AddMemberRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddMemberRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberRsp proto.InternalMessageInfo

// 设置成员职位
type SetMemberPositionReq struct {
	Player   *PlayerInfo `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"`
	Position int32       `protobuf:"varint,2,opt,name=Position,proto3" json:"Position,omitempty"`
}

func (m *SetMemberPositionReq) Reset()         { *m = SetMemberPositionReq{} }
func (m *SetMemberPositionReq) String() string { return proto.CompactTextString(m) }
func (*SetMemberPositionReq) ProtoMessage()    {}
func (*SetMemberPositionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{7}
}
func (m *SetMemberPositionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMemberPositionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMemberPositionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMemberPositionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMemberPositionReq.Merge(m, src)
}
func (m *SetMemberPositionReq) XXX_Size() int {
	return m.Size()
}
func (m *SetMemberPositionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMemberPositionReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetMemberPositionReq proto.InternalMessageInfo

func (m *SetMemberPositionReq) GetPlayer() *PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *SetMemberPositionReq) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type SetMemberPositionRsp struct {
}

func (m *SetMemberPositionRsp) Reset()         { *m = SetMemberPositionRsp{} }
func (m *SetMemberPositionRsp) String() string { return proto.CompactTextString(m) }
func (*SetMemberPositionRsp) ProtoMessage()    {}
func (*SetMemberPositionRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{8}
}
func (m *SetMemberPositionRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMemberPositionRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMemberPositionRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMemberPositionRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMemberPositionRsp.Merge(m, src)
}
func (m *SetMemberPositionRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetMemberPositionRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMemberPositionRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetMemberPositionRsp proto.InternalMessageInfo

// 踢出成员
type KickOutMembersReq struct {
	OpShortId int64   `protobuf:"varint,1,opt,name=OpShortId,proto3" json:"OpShortId,omitempty"`
	ShortIds  []int64 `protobuf:"varint,2,rep,packed,name=ShortIds,proto3" json:"ShortIds,omitempty"`
}

func (m *KickOutMembersReq) Reset()         { *m = KickOutMembersReq{} }
func (m *KickOutMembersReq) String() string { return proto.CompactTextString(m) }
func (*KickOutMembersReq) ProtoMessage()    {}
func (*KickOutMembersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{9}
}
func (m *KickOutMembersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickOutMembersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickOutMembersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickOutMembersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickOutMembersReq.Merge(m, src)
}
func (m *KickOutMembersReq) XXX_Size() int {
	return m.Size()
}
func (m *KickOutMembersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KickOutMembersReq.DiscardUnknown(m)
}

var xxx_messageInfo_KickOutMembersReq proto.InternalMessageInfo

func (m *KickOutMembersReq) GetOpShortId() int64 {
	if m != nil {
		return m.OpShortId
	}
	return 0
}

func (m *KickOutMembersReq) GetShortIds() []int64 {
	if m != nil {
		return m.ShortIds
	}
	return nil
}

type KickOutMembersRsp struct {
}

func (m *KickOutMembersRsp) Reset()         { *m = KickOutMembersRsp{} }
func (m *KickOutMembersRsp) String() string { return proto.CompactTextString(m) }
func (*KickOutMembersRsp) ProtoMessage()    {}
func (*KickOutMembersRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{10}
}
func (m *KickOutMembersRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickOutMembersRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickOutMembersRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickOutMembersRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickOutMembersRsp.Merge(m, src)
}
func (m *KickOutMembersRsp) XXX_Size() int {
	return m.Size()
}
func (m *KickOutMembersRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_KickOutMembersRsp.DiscardUnknown(m)
}

var xxx_messageInfo_KickOutMembersRsp proto.InternalMessageInfo

// 登录时，绑定角色session，并请求自己在联盟中的成员最新信息
type MemberInfoOnLoginReq struct {
	GateSession string `protobuf:"bytes,1,opt,name=GateSession,proto3" json:"GateSession,omitempty"`
	RID         string `protobuf:"bytes,2,opt,name=RID,proto3" json:"RID,omitempty"`
}

func (m *MemberInfoOnLoginReq) Reset()         { *m = MemberInfoOnLoginReq{} }
func (m *MemberInfoOnLoginReq) String() string { return proto.CompactTextString(m) }
func (*MemberInfoOnLoginReq) ProtoMessage()    {}
func (*MemberInfoOnLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{11}
}
func (m *MemberInfoOnLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoOnLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoOnLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberInfoOnLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoOnLoginReq.Merge(m, src)
}
func (m *MemberInfoOnLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoOnLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoOnLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoOnLoginReq proto.InternalMessageInfo

func (m *MemberInfoOnLoginReq) GetGateSession() string {
	if m != nil {
		return m.GateSession
	}
	return ""
}

func (m *MemberInfoOnLoginReq) GetRID() string {
	if m != nil {
		return m.RID
	}
	return ""
}

type MemberInfoOnLoginRsp struct {
	AllianceId int32 `protobuf:"varint,1,opt,name=AllianceId,proto3" json:"AllianceId,omitempty"`
	Position   int32 `protobuf:"varint,2,opt,name=Position,proto3" json:"Position,omitempty"`
}

func (m *MemberInfoOnLoginRsp) Reset()         { *m = MemberInfoOnLoginRsp{} }
func (m *MemberInfoOnLoginRsp) String() string { return proto.CompactTextString(m) }
func (*MemberInfoOnLoginRsp) ProtoMessage()    {}
func (*MemberInfoOnLoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{12}
}
func (m *MemberInfoOnLoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoOnLoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoOnLoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberInfoOnLoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoOnLoginRsp.Merge(m, src)
}
func (m *MemberInfoOnLoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoOnLoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoOnLoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoOnLoginRsp proto.InternalMessageInfo

func (m *MemberInfoOnLoginRsp) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *MemberInfoOnLoginRsp) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// 下线后，通知联盟
type MemberInfoOnLogoutReq struct {
	GateSession string `protobuf:"bytes,1,opt,name=GateSession,proto3" json:"GateSession,omitempty"`
	RID         string `protobuf:"bytes,2,opt,name=RID,proto3" json:"RID,omitempty"`
}

func (m *MemberInfoOnLogoutReq) Reset()         { *m = MemberInfoOnLogoutReq{} }
func (m *MemberInfoOnLogoutReq) String() string { return proto.CompactTextString(m) }
func (*MemberInfoOnLogoutReq) ProtoMessage()    {}
func (*MemberInfoOnLogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{13}
}
func (m *MemberInfoOnLogoutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoOnLogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoOnLogoutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberInfoOnLogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoOnLogoutReq.Merge(m, src)
}
func (m *MemberInfoOnLogoutReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoOnLogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoOnLogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoOnLogoutReq proto.InternalMessageInfo

func (m *MemberInfoOnLogoutReq) GetGateSession() string {
	if m != nil {
		return m.GateSession
	}
	return ""
}

func (m *MemberInfoOnLogoutReq) GetRID() string {
	if m != nil {
		return m.RID
	}
	return ""
}

type MemberInfoOnLogoutRsp struct {
}

func (m *MemberInfoOnLogoutRsp) Reset()         { *m = MemberInfoOnLogoutRsp{} }
func (m *MemberInfoOnLogoutRsp) String() string { return proto.CompactTextString(m) }
func (*MemberInfoOnLogoutRsp) ProtoMessage()    {}
func (*MemberInfoOnLogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{14}
}
func (m *MemberInfoOnLogoutRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberInfoOnLogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberInfoOnLogoutRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberInfoOnLogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberInfoOnLogoutRsp.Merge(m, src)
}
func (m *MemberInfoOnLogoutRsp) XXX_Size() int {
	return m.Size()
}
func (m *MemberInfoOnLogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberInfoOnLogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MemberInfoOnLogoutRsp proto.InternalMessageInfo

// 获取联盟基础信息
type AllianceInfoReq struct {
}

func (m *AllianceInfoReq) Reset()         { *m = AllianceInfoReq{} }
func (m *AllianceInfoReq) String() string { return proto.CompactTextString(m) }
func (*AllianceInfoReq) ProtoMessage()    {}
func (*AllianceInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{15}
}
func (m *AllianceInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllianceInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllianceInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllianceInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllianceInfoReq.Merge(m, src)
}
func (m *AllianceInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AllianceInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllianceInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllianceInfoReq proto.InternalMessageInfo

type AllianceInfoRsp struct {
	MasterShortId int64  `protobuf:"varint,1,opt,name=MasterShortId,proto3" json:"MasterShortId,omitempty"`
	MasterRID     string `protobuf:"bytes,2,opt,name=MasterRID,proto3" json:"MasterRID,omitempty"`
}

func (m *AllianceInfoRsp) Reset()         { *m = AllianceInfoRsp{} }
func (m *AllianceInfoRsp) String() string { return proto.CompactTextString(m) }
func (*AllianceInfoRsp) ProtoMessage()    {}
func (*AllianceInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d63a1f01d82564b, []int{16}
}
func (m *AllianceInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllianceInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllianceInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllianceInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllianceInfoRsp.Merge(m, src)
}
func (m *AllianceInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *AllianceInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllianceInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AllianceInfoRsp proto.InternalMessageInfo

func (m *AllianceInfoRsp) GetMasterShortId() int64 {
	if m != nil {
		return m.MasterShortId
	}
	return 0
}

func (m *AllianceInfoRsp) GetMasterRID() string {
	if m != nil {
		return m.MasterRID
	}
	return ""
}

func init() {
	proto.RegisterType((*AllianceInfoNtf)(nil), "inner.AllianceInfoNtf")
	proto.RegisterType((*CreateAllianceReq)(nil), "inner.CreateAllianceReq")
	proto.RegisterType((*CreateAllianceRsp)(nil), "inner.CreateAllianceRsp")
	proto.RegisterType((*DisbandAllianceReq)(nil), "inner.DisbandAllianceReq")
	proto.RegisterType((*DisbandAllianceRsp)(nil), "inner.DisbandAllianceRsp")
	proto.RegisterType((*AddMemberReq)(nil), "inner.AddMemberReq")
	proto.RegisterType((*AddMemberRsp)(nil), "inner.AddMemberRsp")
	proto.RegisterType((*SetMemberPositionReq)(nil), "inner.SetMemberPositionReq")
	proto.RegisterType((*SetMemberPositionRsp)(nil), "inner.SetMemberPositionRsp")
	proto.RegisterType((*KickOutMembersReq)(nil), "inner.KickOutMembersReq")
	proto.RegisterType((*KickOutMembersRsp)(nil), "inner.KickOutMembersRsp")
	proto.RegisterType((*MemberInfoOnLoginReq)(nil), "inner.MemberInfoOnLoginReq")
	proto.RegisterType((*MemberInfoOnLoginRsp)(nil), "inner.MemberInfoOnLoginRsp")
	proto.RegisterType((*MemberInfoOnLogoutReq)(nil), "inner.MemberInfoOnLogoutReq")
	proto.RegisterType((*MemberInfoOnLogoutRsp)(nil), "inner.MemberInfoOnLogoutRsp")
	proto.RegisterType((*AllianceInfoReq)(nil), "inner.AllianceInfoReq")
	proto.RegisterType((*AllianceInfoRsp)(nil), "inner.AllianceInfoRsp")
}

func init() { proto.RegisterFile("alliance.proto", fileDescriptor_9d63a1f01d82564b) }

var fileDescriptor_9d63a1f01d82564b = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0xaf, 0xd2, 0x40,
	0x14, 0xa5, 0x6d, 0x1e, 0xe1, 0xdd, 0xa7, 0x4f, 0x5b, 0x51, 0x1b, 0x62, 0x9a, 0x66, 0xe2, 0x02,
	0x37, 0x98, 0xf8, 0x56, 0x2e, 0x9f, 0xbe, 0x68, 0x10, 0xf9, 0xc8, 0x10, 0x37, 0x26, 0x2e, 0xa6,
	0x74, 0xc0, 0x06, 0xec, 0x0c, 0x9d, 0x61, 0xe1, 0xbf, 0xf0, 0x67, 0xb9, 0x64, 0xe9, 0xd2, 0xc0,
	0x1f, 0x31, 0x33, 0x2d, 0xa5, 0x2d, 0x04, 0x8c, 0x71, 0x37, 0xf7, 0xf4, 0xde, 0x73, 0xcf, 0x9c,
	0x7b, 0xa7, 0x70, 0x4d, 0x16, 0x8b, 0x88, 0xc4, 0x13, 0xda, 0xe1, 0x09, 0x93, 0xcc, 0xb9, 0x88,
	0xe2, 0x98, 0x26, 0x2d, 0x08, 0x88, 0xc8, 0x20, 0x34, 0x87, 0x07, 0xb7, 0x59, 0x52, 0x37, 0x9e,
	0xb2, 0x81, 0x9c, 0x3a, 0xcf, 0xe0, 0x72, 0xc8, 0xc7, 0x5f, 0x59, 0x22, 0xbb, 0xa1, 0x6b, 0xf8,
	0x46, 0xdb, 0xc2, 0x7b, 0xc0, 0xf1, 0x00, 0xf2, 0x82, 0xd0, 0x35, 0x7d, 0xa3, 0x7d, 0x81, 0x0b,
	0x88, 0xd3, 0x82, 0xc6, 0x88, 0x89, 0x48, 0x46, 0x2c, 0x76, 0x2d, 0xfd, 0x35, 0x8f, 0xd1, 0x6b,
	0xb0, 0xdf, 0x26, 0x94, 0x48, 0xba, 0xcb, 0xc7, 0x74, 0xe9, 0x3c, 0x87, 0xfb, 0x7d, 0x22, 0x24,
	0x4d, 0xca, 0x2d, 0xcb, 0x20, 0xba, 0x39, 0x28, 0x15, 0xbc, 0xa2, 0xc5, 0xa8, 0x6a, 0x41, 0xef,
	0xc0, 0xb9, 0x8b, 0x44, 0x40, 0xe2, 0xb0, 0xd8, 0xf0, 0x21, 0x58, 0xb8, 0x7b, 0xa7, 0xd3, 0x2f,
	0xb1, 0x3a, 0x9e, 0xbb, 0x13, 0x6a, 0x1e, 0xf2, 0x08, 0x8e, 0x66, 0x70, 0xef, 0x36, 0x0c, 0xfb,
	0xf4, 0x5b, 0x40, 0x13, 0xc5, 0xfb, 0x02, 0xea, 0xa3, 0x05, 0xf9, 0x4e, 0x13, 0x4d, 0x7d, 0xf5,
	0xca, 0xee, 0x68, 0xbb, 0x3b, 0x29, 0xa8, 0xdc, 0xc5, 0x59, 0x42, 0xc9, 0x24, 0xb3, 0x6c, 0x92,
	0x92, 0x37, 0x90, 0x53, 0xed, 0x5d, 0x03, 0xab, 0x23, 0xba, 0x2e, 0x36, 0x12, 0x1c, 0x7d, 0x81,
	0xe6, 0x98, 0xca, 0x34, 0xde, 0x95, 0xfd, 0x3f, 0x01, 0xe8, 0xc9, 0x31, 0x7a, 0xc1, 0x51, 0x1f,
	0xec, 0x5e, 0x34, 0x99, 0x0f, 0x57, 0xd9, 0x37, 0xa1, 0x7a, 0x9e, 0x5e, 0x96, 0x16, 0x34, 0xb2,
	0xa3, 0x70, 0x4d, 0xdf, 0x6a, 0x5b, 0x38, 0x8f, 0xd1, 0xa3, 0x03, 0x3a, 0xc1, 0xd1, 0x07, 0x68,
	0xa6, 0x91, 0x52, 0x3b, 0x8c, 0x3f, 0xb2, 0x59, 0xa4, 0xaf, 0xe6, 0xc3, 0xd5, 0x7b, 0x22, 0xe9,
	0x98, 0x0a, 0xa1, 0x24, 0xa7, 0xb3, 0x2b, 0x42, 0xbb, 0xa9, 0x9a, 0xf9, 0x54, 0x11, 0x3e, 0xc6,
	0x75, 0x7e, 0x6b, 0x4e, 0x7a, 0xd3, 0x83, 0xc7, 0x15, 0x4e, 0xb6, 0x92, 0xff, 0x2a, 0xf0, 0xe9,
	0x51, 0x32, 0xc1, 0x91, 0x5d, 0x7e, 0x94, 0x98, 0x2e, 0xd1, 0xa7, 0x0a, 0x24, 0xf8, 0xdf, 0x3d,
	0x1c, 0x35, 0xa0, 0x14, 0xd8, 0x37, 0xdf, 0x03, 0x6f, 0xfc, 0x9f, 0x1b, 0xcf, 0x58, 0x6f, 0x3c,
	0xe3, 0xf7, 0xc6, 0x33, 0x7e, 0x6c, 0xbd, 0xda, 0x7a, 0xeb, 0xd5, 0x7e, 0x6d, 0xbd, 0xda, 0xe7,
	0xfa, 0x4b, 0xbd, 0x3c, 0x41, 0x5d, 0xff, 0x27, 0x6e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0xe6, 0x83, 0x36, 0x4c, 0x04, 0x00, 0x00,
}

func (m *AllianceInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllianceInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllianceInfoNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.AllianceId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.AllianceId))
		i--
		dAtA[i] = 0x10
	}
	if m.OpShortId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.OpShortId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAllianceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAllianceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAllianceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MasterShortId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.MasterShortId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAllianceRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAllianceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAllianceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllianceId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.AllianceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DisbandAllianceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisbandAllianceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisbandAllianceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllianceId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.AllianceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RID) > 0 {
		i -= len(m.RID)
		copy(dAtA[i:], m.RID)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.RID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisbandAllianceRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisbandAllianceRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisbandAllianceRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ntf {
		i--
		if m.Ntf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Position != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlliance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMemberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMemberRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMemberRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetMemberPositionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMemberPositionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMemberPositionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlliance(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetMemberPositionRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMemberPositionRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMemberPositionRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KickOutMembersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOutMembersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickOutMembersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShortIds) > 0 {
		dAtA4 := make([]byte, len(m.ShortIds)*10)
		var j3 int
		for _, num1 := range m.ShortIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintAlliance(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.OpShortId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.OpShortId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickOutMembersRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOutMembersRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickOutMembersRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MemberInfoOnLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoOnLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberInfoOnLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RID) > 0 {
		i -= len(m.RID)
		copy(dAtA[i:], m.RID)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.RID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GateSession) > 0 {
		i -= len(m.GateSession)
		copy(dAtA[i:], m.GateSession)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.GateSession)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberInfoOnLoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoOnLoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberInfoOnLoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.AllianceId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.AllianceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberInfoOnLogoutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoOnLogoutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberInfoOnLogoutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RID) > 0 {
		i -= len(m.RID)
		copy(dAtA[i:], m.RID)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.RID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GateSession) > 0 {
		i -= len(m.GateSession)
		copy(dAtA[i:], m.GateSession)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.GateSession)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberInfoOnLogoutRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberInfoOnLogoutRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberInfoOnLogoutRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllianceInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllianceInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllianceInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllianceInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllianceInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllianceInfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MasterRID) > 0 {
		i -= len(m.MasterRID)
		copy(dAtA[i:], m.MasterRID)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.MasterRID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MasterShortId != 0 {
		i = encodeVarintAlliance(dAtA, i, uint64(m.MasterShortId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlliance(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlliance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllianceInfoNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpShortId != 0 {
		n += 1 + sovAlliance(uint64(m.OpShortId))
	}
	if m.AllianceId != 0 {
		n += 1 + sovAlliance(uint64(m.AllianceId))
	}
	if m.Position != 0 {
		n += 1 + sovAlliance(uint64(m.Position))
	}
	return n
}

func (m *CreateAllianceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MasterShortId != 0 {
		n += 1 + sovAlliance(uint64(m.MasterShortId))
	}
	return n
}

func (m *CreateAllianceRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllianceId != 0 {
		n += 1 + sovAlliance(uint64(m.AllianceId))
	}
	return n
}

func (m *DisbandAllianceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RID)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	if m.AllianceId != 0 {
		n += 1 + sovAlliance(uint64(m.AllianceId))
	}
	return n
}

func (m *DisbandAllianceRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovAlliance(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovAlliance(uint64(m.Position))
	}
	if m.Ntf {
		n += 2
	}
	return n
}

func (m *AddMemberRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetMemberPositionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovAlliance(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovAlliance(uint64(m.Position))
	}
	return n
}

func (m *SetMemberPositionRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KickOutMembersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpShortId != 0 {
		n += 1 + sovAlliance(uint64(m.OpShortId))
	}
	if len(m.ShortIds) > 0 {
		l = 0
		for _, e := range m.ShortIds {
			l += sovAlliance(uint64(e))
		}
		n += 1 + sovAlliance(uint64(l)) + l
	}
	return n
}

func (m *KickOutMembersRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MemberInfoOnLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GateSession)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	l = len(m.RID)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	return n
}

func (m *MemberInfoOnLoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllianceId != 0 {
		n += 1 + sovAlliance(uint64(m.AllianceId))
	}
	if m.Position != 0 {
		n += 1 + sovAlliance(uint64(m.Position))
	}
	return n
}

func (m *MemberInfoOnLogoutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GateSession)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	l = len(m.RID)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	return n
}

func (m *MemberInfoOnLogoutRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllianceInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllianceInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MasterShortId != 0 {
		n += 1 + sovAlliance(uint64(m.MasterShortId))
	}
	l = len(m.MasterRID)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	return n
}

func sovAlliance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlliance(x uint64) (n int) {
	return sovAlliance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllianceInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllianceInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllianceInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpShortId", wireType)
			}
			m.OpShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceId", wireType)
			}
			m.AllianceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllianceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAllianceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAllianceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAllianceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterShortId", wireType)
			}
			m.MasterShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAllianceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAllianceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAllianceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceId", wireType)
			}
			m.AllianceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllianceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisbandAllianceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisbandAllianceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisbandAllianceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceId", wireType)
			}
			m.AllianceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllianceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisbandAllianceRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisbandAllianceRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisbandAllianceRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerInfo{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ntf = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMemberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMemberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMemberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMemberPositionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMemberPositionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMemberPositionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerInfo{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMemberPositionRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMemberPositionRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMemberPositionRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickOutMembersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOutMembersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOutMembersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpShortId", wireType)
			}
			m.OpShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlliance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShortIds = append(m.ShortIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlliance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlliance
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlliance
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShortIds) == 0 {
					m.ShortIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlliance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShortIds = append(m.ShortIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickOutMembersRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOutMembersRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOutMembersRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoOnLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoOnLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoOnLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoOnLoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoOnLoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoOnLoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceId", wireType)
			}
			m.AllianceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllianceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoOnLogoutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoOnLogoutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoOnLogoutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberInfoOnLogoutRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberInfoOnLogoutRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberInfoOnLogoutRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllianceInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllianceInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllianceInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllianceInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllianceInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllianceInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterShortId", wireType)
			}
			m.MasterShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterRID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterRID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlliance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlliance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlliance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlliance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlliance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlliance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlliance = fmt.Errorf("proto: unexpected end of group")
)
