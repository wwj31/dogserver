// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/playerdata.proto

package inner

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoleInfo struct {
	RoleId     uint64          `protobuf:"varint,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	UUId       uint64          `protobuf:"varint,2,opt,name=UUId,proto3" json:"UUId,omitempty"`
	SId        uint64          `protobuf:"varint,3,opt,name=SId,proto3" json:"SId,omitempty"`
	Name       string          `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon       string          `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Country    string          `protobuf:"bytes,6,opt,name=Country,proto3" json:"Country,omitempty"`
	Attributes map[int64]int64 `protobuf:"bytes,7,rep,name=Attributes,proto3" json:"Attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CreateAt   int64           `protobuf:"varint,8,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	LoginAt    int64           `protobuf:"varint,9,opt,name=LoginAt,proto3" json:"LoginAt,omitempty"`
	LogoutAt   int64           `protobuf:"varint,10,opt,name=LogoutAt,proto3" json:"LogoutAt,omitempty"`
}

func (m *RoleInfo) Reset()         { *m = RoleInfo{} }
func (m *RoleInfo) String() string { return proto.CompactTextString(m) }
func (*RoleInfo) ProtoMessage()    {}
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15541e7f09745292, []int{0}
}
func (m *RoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleInfo.Merge(m, src)
}
func (m *RoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoleInfo proto.InternalMessageInfo

func (m *RoleInfo) GetRoleId() uint64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *RoleInfo) GetUUId() uint64 {
	if m != nil {
		return m.UUId
	}
	return 0
}

func (m *RoleInfo) GetSId() uint64 {
	if m != nil {
		return m.SId
	}
	return 0
}

func (m *RoleInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *RoleInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *RoleInfo) GetAttributes() map[int64]int64 {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RoleInfo) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *RoleInfo) GetLoginAt() int64 {
	if m != nil {
		return m.LoginAt
	}
	return 0
}

func (m *RoleInfo) GetLogoutAt() int64 {
	if m != nil {
		return m.LogoutAt
	}
	return 0
}

type ItemInfo struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ItemInfo) Reset()         { *m = ItemInfo{} }
func (m *ItemInfo) String() string { return proto.CompactTextString(m) }
func (*ItemInfo) ProtoMessage()    {}
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15541e7f09745292, []int{1}
}
func (m *ItemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemInfo.Merge(m, src)
}
func (m *ItemInfo) XXX_Size() int {
	return m.Size()
}
func (m *ItemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ItemInfo proto.InternalMessageInfo

func (m *ItemInfo) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

type Mail struct {
	Uuid         uint64          `protobuf:"varint,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	CreateAt     int64           `protobuf:"varint,2,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	SenderRoleId uint64          `protobuf:"varint,3,opt,name=SenderRoleId,proto3" json:"SenderRoleId,omitempty"`
	Name         string          `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Title        string          `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`
	Content      string          `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	Items        map[int64]int64 `protobuf:"bytes,7,rep,name=Items,proto3" json:"Items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Status       int32           `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *Mail) Reset()         { *m = Mail{} }
func (m *Mail) String() string { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()    {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_15541e7f09745292, []int{2}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (m *Mail) GetUuid() uint64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Mail) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Mail) GetSenderRoleId() uint64 {
	if m != nil {
		return m.SenderRoleId
	}
	return 0
}

func (m *Mail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Mail) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MailInfo struct {
	Mails map[uint64]*Mail `protobuf:"bytes,1,rep,name=Mails,proto3" json:"Mails,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MailInfo) Reset()         { *m = MailInfo{} }
func (m *MailInfo) String() string { return proto.CompactTextString(m) }
func (*MailInfo) ProtoMessage()    {}
func (*MailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_15541e7f09745292, []int{3}
}
func (m *MailInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailInfo.Merge(m, src)
}
func (m *MailInfo) XXX_Size() int {
	return m.Size()
}
func (m *MailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MailInfo proto.InternalMessageInfo

func (m *MailInfo) GetMails() map[uint64]*Mail {
	if m != nil {
		return m.Mails
	}
	return nil
}

func init() {
	proto.RegisterType((*RoleInfo)(nil), "inner.RoleInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "inner.RoleInfo.AttributesEntry")
	proto.RegisterType((*ItemInfo)(nil), "inner.ItemInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "inner.ItemInfo.ItemsEntry")
	proto.RegisterType((*Mail)(nil), "inner.Mail")
	proto.RegisterMapType((map[int64]int64)(nil), "inner.Mail.ItemsEntry")
	proto.RegisterType((*MailInfo)(nil), "inner.MailInfo")
	proto.RegisterMapType((map[uint64]*Mail)(nil), "inner.MailInfo.MailsEntry")
}

func init() { proto.RegisterFile("proto/playerdata.proto", fileDescriptor_15541e7f09745292) }

var fileDescriptor_15541e7f09745292 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xfa, 0x23, 0x75, 0x27, 0x48, 0xa0, 0x55, 0x15, 0xad, 0x7c, 0x30, 0x26, 0xa7, 0x1c,
	0x50, 0x8a, 0xca, 0xa5, 0x42, 0x42, 0x28, 0x54, 0x3d, 0x58, 0x2a, 0x1c, 0x1c, 0x7a, 0xe1, 0xe6,
	0xe2, 0xa5, 0xb2, 0x70, 0x77, 0x2b, 0x67, 0x5c, 0x29, 0x67, 0xfe, 0x00, 0xbf, 0x80, 0xdf, 0xc3,
	0xb1, 0x47, 0x0e, 0x1c, 0x50, 0xf2, 0x47, 0xd0, 0xce, 0x7a, 0x89, 0x13, 0xb8, 0x20, 0x6e, 0xef,
	0xbd, 0xdd, 0xf1, 0xcc, 0xbc, 0xb7, 0x86, 0xf1, 0x6d, 0xa3, 0x51, 0x1f, 0xdf, 0xd6, 0xc5, 0x4a,
	0x36, 0x65, 0x81, 0xc5, 0x8c, 0x04, 0x1e, 0x56, 0x4a, 0xc9, 0x66, 0xf2, 0xc3, 0x83, 0x28, 0xd7,
	0xb5, 0xcc, 0xd4, 0x47, 0xcd, 0xc7, 0x30, 0x24, 0x5c, 0x0a, 0x96, 0xb2, 0x69, 0x90, 0x77, 0x8c,
	0x73, 0x08, 0x2e, 0x2f, 0xb3, 0x52, 0x78, 0xa4, 0x12, 0xe6, 0x8f, 0xc0, 0x5f, 0x64, 0xa5, 0xf0,
	0x49, 0x32, 0xd0, 0xdc, 0x7a, 0x5b, 0xdc, 0x48, 0x11, 0xa4, 0x6c, 0x7a, 0x98, 0x13, 0x36, 0x5a,
	0xf6, 0x41, 0x2b, 0x11, 0x5a, 0xcd, 0x60, 0x2e, 0xe0, 0xe0, 0x4c, 0xb7, 0x0a, 0x9b, 0x95, 0x18,
	0x92, 0xec, 0x28, 0x7f, 0x05, 0x30, 0x47, 0x6c, 0xaa, 0xab, 0x16, 0xe5, 0x52, 0x1c, 0xa4, 0xfe,
	0x74, 0x74, 0xf2, 0x78, 0x46, 0x83, 0xce, 0xdc, 0x90, 0xb3, 0xed, 0x8d, 0x73, 0x53, 0x94, 0xf7,
	0x4a, 0x78, 0x0c, 0xd1, 0x59, 0x23, 0x0b, 0x94, 0x73, 0x14, 0x51, 0xca, 0xa6, 0x7e, 0xfe, 0x9b,
	0x9b, 0xb6, 0x17, 0xfa, 0xba, 0x52, 0x73, 0x14, 0x87, 0x74, 0xe4, 0xa8, 0xa9, 0xba, 0xd0, 0xd7,
	0xba, 0xc5, 0x39, 0x0a, 0xb0, 0x55, 0x8e, 0xc7, 0x2f, 0xe1, 0xe1, 0x5e, 0x43, 0xb3, 0xf9, 0x27,
	0xb9, 0x22, 0x8b, 0xfc, 0xdc, 0x40, 0x7e, 0x04, 0xe1, 0x5d, 0x51, 0xb7, 0x92, 0x0c, 0xf2, 0x73,
	0x4b, 0x5e, 0x78, 0xa7, 0x6c, 0x72, 0x07, 0x51, 0x86, 0xf2, 0x86, 0xdc, 0x7d, 0x06, 0xa1, 0xc1,
	0x4b, 0xc1, 0x68, 0xb1, 0xb8, 0x5b, 0xcc, 0x9d, 0x13, 0xe8, 0x76, 0xb2, 0x17, 0xe3, 0x53, 0x80,
	0xad, 0xf8, 0x4f, 0x7d, 0xbf, 0x7a, 0x10, 0xbc, 0x29, 0xaa, 0x9a, 0xa2, 0x6b, 0x2b, 0x17, 0x28,
	0xe1, 0x1d, 0x97, 0xbc, 0x3d, 0x97, 0x26, 0xf0, 0x60, 0x21, 0x55, 0x29, 0x9b, 0xee, 0x21, 0xd8,
	0x7c, 0x77, 0xb4, 0xbf, 0x06, 0x7d, 0x04, 0xe1, 0xbb, 0x0a, 0x6b, 0xd9, 0x25, 0x6d, 0x89, 0x8d,
	0x5a, 0xa1, 0x54, 0xb8, 0x8d, 0x9a, 0x28, 0x7f, 0xea, 0xcc, 0xb0, 0x29, 0x8f, 0x3b, 0x33, 0xcc,
	0xcc, 0x7f, 0x1a, 0x61, 0x1e, 0xe6, 0x02, 0x0b, 0x6c, 0x97, 0x94, 0x6a, 0x98, 0x77, 0xec, 0x3f,
	0x0c, 0xfa, 0xcc, 0x20, 0x32, 0xcd, 0x5c, 0x32, 0x06, 0xef, 0x27, 0xe3, 0xce, 0x09, 0xb8, 0x81,
	0x08, 0xc7, 0xe7, 0x00, 0x5b, 0xb1, 0xdf, 0x38, 0xb0, 0x8d, 0x9f, 0xf4, 0x1b, 0x8f, 0x4e, 0x46,
	0xbd, 0x2f, 0xf6, 0xa6, 0x78, 0x9d, 0x7e, 0x5b, 0x27, 0xec, 0x7e, 0x9d, 0xb0, 0x9f, 0xeb, 0x84,
	0x7d, 0xd9, 0x24, 0x83, 0xfb, 0x4d, 0x32, 0xf8, 0xbe, 0x49, 0x06, 0xef, 0x87, 0xc7, 0x54, 0x71,
	0x35, 0xa4, 0xbf, 0xf5, 0xf9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x4f, 0xa9, 0xda, 0xc7,
	0x03, 0x00, 0x00,
}

func (m *RoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogoutAt != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.LogoutAt))
		i--
		dAtA[i] = 0x50
	}
	if m.LoginAt != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.LoginAt))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateAt != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i = encodeVarintPlayerdata(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPlayerdata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlayerdata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.SId != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.SId))
		i--
		dAtA[i] = 0x18
	}
	if m.UUId != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.UUId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintPlayerdata(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPlayerdata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlayerdata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintPlayerdata(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPlayerdata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlayerdata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPlayerdata(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderRoleId != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.SenderRoleId))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateAt != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Uuid != 0 {
		i = encodeVarintPlayerdata(dAtA, i, uint64(m.Uuid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for k := range m.Mails {
			v := m.Mails[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPlayerdata(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPlayerdata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlayerdata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayerdata(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerdata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovPlayerdata(uint64(m.RoleId))
	}
	if m.UUId != 0 {
		n += 1 + sovPlayerdata(uint64(m.UUId))
	}
	if m.SId != 0 {
		n += 1 + sovPlayerdata(uint64(m.SId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPlayerdata(uint64(k)) + 1 + sovPlayerdata(uint64(v))
			n += mapEntrySize + 1 + sovPlayerdata(uint64(mapEntrySize))
		}
	}
	if m.CreateAt != 0 {
		n += 1 + sovPlayerdata(uint64(m.CreateAt))
	}
	if m.LoginAt != 0 {
		n += 1 + sovPlayerdata(uint64(m.LoginAt))
	}
	if m.LogoutAt != 0 {
		n += 1 + sovPlayerdata(uint64(m.LogoutAt))
	}
	return n
}

func (m *ItemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPlayerdata(uint64(k)) + 1 + sovPlayerdata(uint64(v))
			n += mapEntrySize + 1 + sovPlayerdata(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uuid != 0 {
		n += 1 + sovPlayerdata(uint64(m.Uuid))
	}
	if m.CreateAt != 0 {
		n += 1 + sovPlayerdata(uint64(m.CreateAt))
	}
	if m.SenderRoleId != 0 {
		n += 1 + sovPlayerdata(uint64(m.SenderRoleId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPlayerdata(uint64(l))
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPlayerdata(uint64(k)) + 1 + sovPlayerdata(uint64(v))
			n += mapEntrySize + 1 + sovPlayerdata(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovPlayerdata(uint64(m.Status))
	}
	return n
}

func (m *MailInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for k, v := range m.Mails {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPlayerdata(uint64(l))
			}
			mapEntrySize := 1 + sovPlayerdata(uint64(k)) + l
			n += mapEntrySize + 1 + sovPlayerdata(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPlayerdata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerdata(x uint64) (n int) {
	return sovPlayerdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUId", wireType)
			}
			m.UUId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UUId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SId", wireType)
			}
			m.SId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlayerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAt", wireType)
			}
			m.LoginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutAt", wireType)
			}
			m.LogoutAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlayerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			m.Uuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderRoleId", wireType)
			}
			m.SenderRoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderRoleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlayerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerdata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mails == nil {
				m.Mails = make(map[uint64]*Mail)
			}
			var mapkey uint64
			var mapvalue *Mail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerdata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerdata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPlayerdata
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPlayerdata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Mail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerdata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlayerdata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mails[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayerdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerdata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerdata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerdata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerdata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerdata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerdata = fmt.Errorf("proto: unexpected end of group")
)
