// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: fasterrun.proto

package outer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 血战到底 游戏数据
type FasterRunGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            FasterRunState         `protobuf:"varint,1,opt,name=State,proto3,enum=outer.FasterRunState" json:"State,omitempty"`     // 当前状态
	StateEnterAt     int64                  `protobuf:"varint,2,opt,name=StateEnterAt,proto3" json:"StateEnterAt,omitempty"`                 // 当前状态的进入时间(毫秒)
	StateEndAt       int64                  `protobuf:"varint,3,opt,name=StateEndAt,proto3" json:"StateEndAt,omitempty"`                     // 当前状态的结束时间(毫秒)
	GameCount        int32                  `protobuf:"varint,4,opt,name=GameCount,proto3" json:"GameCount,omitempty"`                       // 游戏局数
	Players          []*FasterRunPlayerInfo `protobuf:"bytes,5,rep,name=Players,proto3" json:"Players,omitempty"`                            // 分别代表0-2号座位的玩家
	MasterIndex      int32                  `protobuf:"varint,7,opt,name=MasterIndex,proto3" json:"MasterIndex,omitempty"`                   // 庄家位置 (0-2)
	TotalCardsCount  int32                  `protobuf:"varint,9,opt,name=TotalCardsCount,proto3" json:"TotalCardsCount,omitempty"`           // 剩余总牌数
	CardsPlayHistory []int32                `protobuf:"varint,10,rep,packed,name=CardsPlayHistory,proto3" json:"CardsPlayHistory,omitempty"` // 出牌历史记录
	CardsPlayOrder   []int32                `protobuf:"varint,11,rep,packed,name=CardsPlayOrder,proto3" json:"CardsPlayOrder,omitempty"`     // 出牌顺序
	ActionShortId    int64                  `protobuf:"varint,12,opt,name=ActionShortId,proto3" json:"ActionShortId,omitempty"`              // 当前操作者
	ActionEndAt      int64                  `protobuf:"varint,13,opt,name=ActionEndAt,proto3" json:"ActionEndAt,omitempty"`                  // 操作结束时间(毫秒)
}

func (x *FasterRunGameInfo) Reset() {
	*x = FasterRunGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunGameInfo) ProtoMessage() {}

func (x *FasterRunGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunGameInfo.ProtoReflect.Descriptor instead.
func (*FasterRunGameInfo) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{0}
}

func (x *FasterRunGameInfo) GetState() FasterRunState {
	if x != nil {
		return x.State
	}
	return FasterRunState_FasterRunStateReady
}

func (x *FasterRunGameInfo) GetStateEnterAt() int64 {
	if x != nil {
		return x.StateEnterAt
	}
	return 0
}

func (x *FasterRunGameInfo) GetStateEndAt() int64 {
	if x != nil {
		return x.StateEndAt
	}
	return 0
}

func (x *FasterRunGameInfo) GetGameCount() int32 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *FasterRunGameInfo) GetPlayers() []*FasterRunPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *FasterRunGameInfo) GetMasterIndex() int32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

func (x *FasterRunGameInfo) GetTotalCardsCount() int32 {
	if x != nil {
		return x.TotalCardsCount
	}
	return 0
}

func (x *FasterRunGameInfo) GetCardsPlayHistory() []int32 {
	if x != nil {
		return x.CardsPlayHistory
	}
	return nil
}

func (x *FasterRunGameInfo) GetCardsPlayOrder() []int32 {
	if x != nil {
		return x.CardsPlayOrder
	}
	return nil
}

func (x *FasterRunGameInfo) GetActionShortId() int64 {
	if x != nil {
		return x.ActionShortId
	}
	return 0
}

func (x *FasterRunGameInfo) GetActionEndAt() int64 {
	if x != nil {
		return x.ActionEndAt
	}
	return 0
}

// 跑得快 参与游戏的玩家数据
type FasterRunPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId       int64 `protobuf:"varint,1,opt,name=ShortId,proto3" json:"ShortId,omitempty"`             // 参与者短ID
	Ready         bool  `protobuf:"varint,2,opt,name=Ready,proto3" json:"Ready,omitempty"`                 // true.准备、false.未准备
	ReadyExpireAt int64 `protobuf:"varint,3,opt,name=ReadyExpireAt,proto3" json:"ReadyExpireAt,omitempty"` // 准备超时时间(毫秒)
	// TODO ...
	Score int64 `protobuf:"varint,11,opt,name=Score,proto3" json:"Score,omitempty"` // 玩家本局拥有的分数
}

func (x *FasterRunPlayerInfo) Reset() {
	*x = FasterRunPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayerInfo) ProtoMessage() {}

func (x *FasterRunPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayerInfo.ProtoReflect.Descriptor instead.
func (*FasterRunPlayerInfo) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{1}
}

func (x *FasterRunPlayerInfo) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *FasterRunPlayerInfo) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *FasterRunPlayerInfo) GetReadyExpireAt() int64 {
	if x != nil {
		return x.ReadyExpireAt
	}
	return 0
}

func (x *FasterRunPlayerInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// //////////////////////////////////////////// 游戏操作请求 //////////////////////////////////////////////
// 准备\取消
type FasterRunReadyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=Ready,proto3" json:"Ready,omitempty"` // true.准备、false.取消准备
}

func (x *FasterRunReadyReq) Reset() {
	*x = FasterRunReadyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunReadyReq) ProtoMessage() {}

func (x *FasterRunReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunReadyReq.ProtoReflect.Descriptor instead.
func (*FasterRunReadyReq) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{2}
}

func (x *FasterRunReadyReq) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type FasterRunReadyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=Ready,proto3" json:"Ready,omitempty"`
}

func (x *FasterRunReadyRsp) Reset() {
	*x = FasterRunReadyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunReadyRsp) ProtoMessage() {}

func (x *FasterRunReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunReadyRsp.ProtoReflect.Descriptor instead.
func (*FasterRunReadyRsp) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{3}
}

func (x *FasterRunReadyRsp) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

// 出牌
type FasterRunPlayCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"` // 手牌下标 0开始
}

func (x *FasterRunPlayCardReq) Reset() {
	*x = FasterRunPlayCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayCardReq) ProtoMessage() {}

func (x *FasterRunPlayCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayCardReq.ProtoReflect.Descriptor instead.
func (*FasterRunPlayCardReq) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{4}
}

func (x *FasterRunPlayCardReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type FasterRunPlayCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FasterRunPlayCardRsp) Reset() {
	*x = FasterRunPlayCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayCardRsp) ProtoMessage() {}

func (x *FasterRunPlayCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayCardRsp.ProtoReflect.Descriptor instead.
func (*FasterRunPlayCardRsp) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{5}
}

// //////////////////////////////////////////// 游戏通知 //////////////////////////////////////////////
type FasterRunPlayerReadyNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId int64 `protobuf:"varint,1,opt,name=ShortId,proto3" json:"ShortId,omitempty"`
	Ready   bool  `protobuf:"varint,2,opt,name=Ready,proto3" json:"Ready,omitempty"` // true.准备、false.未准备
}

func (x *FasterRunPlayerReadyNtf) Reset() {
	*x = FasterRunPlayerReadyNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayerReadyNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayerReadyNtf) ProtoMessage() {}

func (x *FasterRunPlayerReadyNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayerReadyNtf.ProtoReflect.Descriptor instead.
func (*FasterRunPlayerReadyNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{6}
}

func (x *FasterRunPlayerReadyNtf) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *FasterRunPlayerReadyNtf) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

// 进入准备中，（房间初始状态， 结算结束后会通知）
type FasterRunReadyNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadyExpireAt int64 `protobuf:"varint,1,opt,name=ReadyExpireAt,proto3" json:"ReadyExpireAt,omitempty"` // 结算后重新进入准备状态，所有玩家统一准备超时时间(毫秒)
}

func (x *FasterRunReadyNtf) Reset() {
	*x = FasterRunReadyNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunReadyNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunReadyNtf) ProtoMessage() {}

func (x *FasterRunReadyNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunReadyNtf.ProtoReflect.Descriptor instead.
func (*FasterRunReadyNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{7}
}

func (x *FasterRunReadyNtf) GetReadyExpireAt() int64 {
	if x != nil {
		return x.ReadyExpireAt
	}
	return 0
}

// 开始发牌通知
type FasterRunDealNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards      []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`    // 手牌 (萬11-19 条21-29 筒31-39)
	MasterSeat int32   `protobuf:"varint,2,opt,name=MasterSeat,proto3" json:"MasterSeat,omitempty"` // 庄家位置
}

func (x *FasterRunDealNtf) Reset() {
	*x = FasterRunDealNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunDealNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunDealNtf) ProtoMessage() {}

func (x *FasterRunDealNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunDealNtf.ProtoReflect.Descriptor instead.
func (*FasterRunDealNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{8}
}

func (x *FasterRunDealNtf) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *FasterRunDealNtf) GetMasterSeat() int32 {
	if x != nil {
		return x.MasterSeat
	}
	return 0
}

// 开始游戏通知
type FasterRunPlayingNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FasterRunPlayingNtf) Reset() {
	*x = FasterRunPlayingNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayingNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayingNtf) ProtoMessage() {}

func (x *FasterRunPlayingNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayingNtf.ProtoReflect.Descriptor instead.
func (*FasterRunPlayingNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{9}
}

// 玩家轮动通知
type FasterRunPlayCardNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCards  int32 `protobuf:"varint,1,opt,name=TotalCards,proto3" json:"TotalCards,omitempty"`   // 剩余总牌数
	ActionEndAt int64 `protobuf:"varint,3,opt,name=ActionEndAt,proto3" json:"ActionEndAt,omitempty"` // 操作结束时间(毫秒)
	FirstPlay   bool  `protobuf:"varint,4,opt,name=FirstPlay,proto3" json:"FirstPlay,omitempty"`     // true.首轮出牌、false.跟牌
	// 跟牌操作，展示出牌人信息
	PlayedCard      []int32 `protobuf:"varint,5,rep,packed,name=PlayedCard,proto3" json:"PlayedCard,omitempty"`    // 打出去的牌
	ShortIdOfPlayed int64   `protobuf:"varint,6,opt,name=ShortIdOfPlayed,proto3" json:"ShortIdOfPlayed,omitempty"` // 出牌的人
	// 需要行动的下一位玩家
	ShortIdOfNextPlay int64 `protobuf:"varint,7,opt,name=ShortIdOfNextPlay,proto3" json:"ShortIdOfNextPlay,omitempty"` // 下一位需要出牌的人
}

func (x *FasterRunPlayCardNtf) Reset() {
	*x = FasterRunPlayCardNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunPlayCardNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunPlayCardNtf) ProtoMessage() {}

func (x *FasterRunPlayCardNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunPlayCardNtf.ProtoReflect.Descriptor instead.
func (*FasterRunPlayCardNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{10}
}

func (x *FasterRunPlayCardNtf) GetTotalCards() int32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *FasterRunPlayCardNtf) GetActionEndAt() int64 {
	if x != nil {
		return x.ActionEndAt
	}
	return 0
}

func (x *FasterRunPlayCardNtf) GetFirstPlay() bool {
	if x != nil {
		return x.FirstPlay
	}
	return false
}

func (x *FasterRunPlayCardNtf) GetPlayedCard() []int32 {
	if x != nil {
		return x.PlayedCard
	}
	return nil
}

func (x *FasterRunPlayCardNtf) GetShortIdOfPlayed() int64 {
	if x != nil {
		return x.ShortIdOfPlayed
	}
	return 0
}

func (x *FasterRunPlayCardNtf) GetShortIdOfNextPlay() int64 {
	if x != nil {
		return x.ShortIdOfNextPlay
	}
	return 0
}

// 结算玩家数据
type FasterRunSettlementPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *FasterRunPlayerInfo `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"` //
	// 胡牌信息
	DianPaoSeatIndex    int32           `protobuf:"varint,2,opt,name=DianPaoSeatIndex,proto3" json:"DianPaoSeatIndex,omitempty"`                                                                                                // 点炮的人位置，如果是自己，表示自摸
	HuWinScoreSeatIndex map[int32]int64 `protobuf:"bytes,3,rep,name=HuWinScoreSeatIndex,proto3" json:"HuWinScoreSeatIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 胡牌赢得的每家分数 map<赔钱的位置，赔的分>
	// 被杠的信息
	ByDarkGangSeatIndex  map[int32]int64 `protobuf:"bytes,4,rep,name=ByDarkGangSeatIndex,proto3" json:"ByDarkGangSeatIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 被哪些人暗杠，map<杠的玩家位置，赔的分>
	ByLightGangSeatIndex map[int32]int64 `protobuf:"bytes,5,rep,name=ByLightGangSeatIndex,proto3" json:"ByLightGangSeatIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 被哪些人明杠，map<杠的玩家位置，赔的分>
	TotalFan             int32           `protobuf:"varint,6,opt,name=TotalFan,proto3" json:"TotalFan,omitempty"`                                                                                                                  // 总番数
	TotalScore           int64           `protobuf:"varint,7,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`                                                                                                              // 总输赢 负数为输
}

func (x *FasterRunSettlementPlayerData) Reset() {
	*x = FasterRunSettlementPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunSettlementPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunSettlementPlayerData) ProtoMessage() {}

func (x *FasterRunSettlementPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunSettlementPlayerData.ProtoReflect.Descriptor instead.
func (*FasterRunSettlementPlayerData) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{11}
}

func (x *FasterRunSettlementPlayerData) GetPlayer() *FasterRunPlayerInfo {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *FasterRunSettlementPlayerData) GetDianPaoSeatIndex() int32 {
	if x != nil {
		return x.DianPaoSeatIndex
	}
	return 0
}

func (x *FasterRunSettlementPlayerData) GetHuWinScoreSeatIndex() map[int32]int64 {
	if x != nil {
		return x.HuWinScoreSeatIndex
	}
	return nil
}

func (x *FasterRunSettlementPlayerData) GetByDarkGangSeatIndex() map[int32]int64 {
	if x != nil {
		return x.ByDarkGangSeatIndex
	}
	return nil
}

func (x *FasterRunSettlementPlayerData) GetByLightGangSeatIndex() map[int32]int64 {
	if x != nil {
		return x.ByLightGangSeatIndex
	}
	return nil
}

func (x *FasterRunSettlementPlayerData) GetTotalFan() int32 {
	if x != nil {
		return x.TotalFan
	}
	return 0
}

func (x *FasterRunSettlementPlayerData) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

// 结算通知
type FasterRunSettlementNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndAt            int64                            `protobuf:"varint,1,opt,name=EndAt,proto3" json:"EndAt,omitempty"`                       // 结算结束时间
	NotHu            bool                             `protobuf:"varint,2,opt,name=NotHu,proto3" json:"NotHu,omitempty"`                       // true.流局
	HasScoreZero     bool                             `protobuf:"varint,3,opt,name=HasScoreZero,proto3" json:"HasScoreZero,omitempty"`         // 玩家分输光了，提前进入结算(只有在房间选择不允许负分的时候生效)
	PlayerData       []*FasterRunSettlementPlayerData `protobuf:"bytes,4,rep,name=PlayerData,proto3" json:"PlayerData,omitempty"`              // 东南西北四个方位玩家结算数据
	GameCount        int32                            `protobuf:"varint,5,opt,name=GameCount,proto3" json:"GameCount,omitempty"`               // 游戏局数
	GameSettlementAt int64                            `protobuf:"varint,6,opt,name=GameSettlementAt,proto3" json:"GameSettlementAt,omitempty"` // 结算开始时间
	HuSeatIndex      []int32                          `protobuf:"varint,7,rep,packed,name=HuSeatIndex,proto3" json:"HuSeatIndex,omitempty"`    // 胡牌的位置,按胡牌先后位置排序
	NotTingSeat      []int32                          `protobuf:"varint,8,rep,packed,name=NotTingSeat,proto3" json:"NotTingSeat,omitempty"`    // 哪些位置没听牌
	PigSeat          []int32                          `protobuf:"varint,9,rep,packed,name=PigSeat,proto3" json:"PigSeat,omitempty"`            // 哪些位置是花猪
	FinalSettlement  *FasterRunFinialSettlement       `protobuf:"bytes,10,opt,name=FinalSettlement,proto3" json:"FinalSettlement,omitempty"`   // 非大结算，值为null
}

func (x *FasterRunSettlementNtf) Reset() {
	*x = FasterRunSettlementNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunSettlementNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunSettlementNtf) ProtoMessage() {}

func (x *FasterRunSettlementNtf) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunSettlementNtf.ProtoReflect.Descriptor instead.
func (*FasterRunSettlementNtf) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{12}
}

func (x *FasterRunSettlementNtf) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *FasterRunSettlementNtf) GetNotHu() bool {
	if x != nil {
		return x.NotHu
	}
	return false
}

func (x *FasterRunSettlementNtf) GetHasScoreZero() bool {
	if x != nil {
		return x.HasScoreZero
	}
	return false
}

func (x *FasterRunSettlementNtf) GetPlayerData() []*FasterRunSettlementPlayerData {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

func (x *FasterRunSettlementNtf) GetGameCount() int32 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *FasterRunSettlementNtf) GetGameSettlementAt() int64 {
	if x != nil {
		return x.GameSettlementAt
	}
	return 0
}

func (x *FasterRunSettlementNtf) GetHuSeatIndex() []int32 {
	if x != nil {
		return x.HuSeatIndex
	}
	return nil
}

func (x *FasterRunSettlementNtf) GetNotTingSeat() []int32 {
	if x != nil {
		return x.NotTingSeat
	}
	return nil
}

func (x *FasterRunSettlementNtf) GetPigSeat() []int32 {
	if x != nil {
		return x.PigSeat
	}
	return nil
}

func (x *FasterRunSettlementNtf) GetFinalSettlement() *FasterRunFinialSettlement {
	if x != nil {
		return x.FinalSettlement
	}
	return nil
}

// 大结算信息
type FasterRunFinialSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInfo []*FasterRunFinialPlayerInfo `protobuf:"bytes,1,rep,name=PlayerInfo,proto3" json:"PlayerInfo,omitempty"` // 东南西北4个玩家的大结算信息
}

func (x *FasterRunFinialSettlement) Reset() {
	*x = FasterRunFinialSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunFinialSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunFinialSettlement) ProtoMessage() {}

func (x *FasterRunFinialSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunFinialSettlement.ProtoReflect.Descriptor instead.
func (*FasterRunFinialSettlement) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{13}
}

func (x *FasterRunFinialSettlement) GetPlayerInfo() []*FasterRunFinialPlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type FasterRunFinialPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalScore int64 `protobuf:"varint,1,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"` // 总输赢，负分表示输
}

func (x *FasterRunFinialPlayerInfo) Reset() {
	*x = FasterRunFinialPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasterrun_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FasterRunFinialPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FasterRunFinialPlayerInfo) ProtoMessage() {}

func (x *FasterRunFinialPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fasterrun_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FasterRunFinialPlayerInfo.ProtoReflect.Descriptor instead.
func (*FasterRunFinialPlayerInfo) Descriptor() ([]byte, []int) {
	return file_fasterrun_proto_rawDescGZIP(), []int{14}
}

func (x *FasterRunFinialPlayerInfo) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

var File_fasterrun_proto protoreflect.FileDescriptor

var file_fasterrun_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x03,
	0x0a, 0x11, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x22, 0x81, 0x01, 0x0a, 0x13, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22,
	0x29, 0x0a, 0x11, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x2c, 0x0a, 0x14, 0x46, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x22, 0x49, 0x0a, 0x17, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x74, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x39, 0x0a, 0x11, 0x46,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x74, 0x66,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x48, 0x0a, 0x10, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x74, 0x66,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x4f, 0x66, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x4f, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x4f, 0x66, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x4f, 0x66,
	0x4e, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x22, 0xea, 0x05, 0x0a, 0x1d, 0x46, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x69, 0x61, 0x6e, 0x50, 0x61, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x69, 0x61, 0x6e, 0x50, 0x61,
	0x6f, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6f, 0x0a, 0x13, 0x48, 0x75,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x75,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x48, 0x75, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6f, 0x0a, 0x13, 0x42,
	0x79, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42,
	0x79, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x42, 0x79, 0x44, 0x61, 0x72, 0x6b, 0x47,
	0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x72, 0x0a, 0x14,
	0x42, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x42, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x42, 0x79, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x46, 0x0a, 0x18,
	0x48, 0x75, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x42, 0x79, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61,
	0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19,
	0x42, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x03, 0x0a, 0x16, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x48, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x48, 0x75, 0x12, 0x22, 0x0a, 0x0c,
	0x48, 0x61, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5a, 0x65, 0x72, 0x6f,
	0x12, 0x44, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x48, 0x75, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x75, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x54, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x54, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69, 0x67, 0x53, 0x65, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x50, 0x69, 0x67, 0x53, 0x65, 0x61, 0x74, 0x12, 0x4a,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x46, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e,
	0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x19, 0x46, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fasterrun_proto_rawDescOnce sync.Once
	file_fasterrun_proto_rawDescData = file_fasterrun_proto_rawDesc
)

func file_fasterrun_proto_rawDescGZIP() []byte {
	file_fasterrun_proto_rawDescOnce.Do(func() {
		file_fasterrun_proto_rawDescData = protoimpl.X.CompressGZIP(file_fasterrun_proto_rawDescData)
	})
	return file_fasterrun_proto_rawDescData
}

var file_fasterrun_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_fasterrun_proto_goTypes = []interface{}{
	(*FasterRunGameInfo)(nil),             // 0: outer.FasterRunGameInfo
	(*FasterRunPlayerInfo)(nil),           // 1: outer.FasterRunPlayerInfo
	(*FasterRunReadyReq)(nil),             // 2: outer.FasterRunReadyReq
	(*FasterRunReadyRsp)(nil),             // 3: outer.FasterRunReadyRsp
	(*FasterRunPlayCardReq)(nil),          // 4: outer.FasterRunPlayCardReq
	(*FasterRunPlayCardRsp)(nil),          // 5: outer.FasterRunPlayCardRsp
	(*FasterRunPlayerReadyNtf)(nil),       // 6: outer.FasterRunPlayerReadyNtf
	(*FasterRunReadyNtf)(nil),             // 7: outer.FasterRunReadyNtf
	(*FasterRunDealNtf)(nil),              // 8: outer.FasterRunDealNtf
	(*FasterRunPlayingNtf)(nil),           // 9: outer.FasterRunPlayingNtf
	(*FasterRunPlayCardNtf)(nil),          // 10: outer.FasterRunPlayCardNtf
	(*FasterRunSettlementPlayerData)(nil), // 11: outer.FasterRunSettlementPlayerData
	(*FasterRunSettlementNtf)(nil),        // 12: outer.FasterRunSettlementNtf
	(*FasterRunFinialSettlement)(nil),     // 13: outer.FasterRunFinialSettlement
	(*FasterRunFinialPlayerInfo)(nil),     // 14: outer.FasterRunFinialPlayerInfo
	nil,                                   // 15: outer.FasterRunSettlementPlayerData.HuWinScoreSeatIndexEntry
	nil,                                   // 16: outer.FasterRunSettlementPlayerData.ByDarkGangSeatIndexEntry
	nil,                                   // 17: outer.FasterRunSettlementPlayerData.ByLightGangSeatIndexEntry
	(FasterRunState)(0),                   // 18: outer.FasterRunState
}
var file_fasterrun_proto_depIdxs = []int32{
	18, // 0: outer.FasterRunGameInfo.State:type_name -> outer.FasterRunState
	1,  // 1: outer.FasterRunGameInfo.Players:type_name -> outer.FasterRunPlayerInfo
	1,  // 2: outer.FasterRunSettlementPlayerData.Player:type_name -> outer.FasterRunPlayerInfo
	15, // 3: outer.FasterRunSettlementPlayerData.HuWinScoreSeatIndex:type_name -> outer.FasterRunSettlementPlayerData.HuWinScoreSeatIndexEntry
	16, // 4: outer.FasterRunSettlementPlayerData.ByDarkGangSeatIndex:type_name -> outer.FasterRunSettlementPlayerData.ByDarkGangSeatIndexEntry
	17, // 5: outer.FasterRunSettlementPlayerData.ByLightGangSeatIndex:type_name -> outer.FasterRunSettlementPlayerData.ByLightGangSeatIndexEntry
	11, // 6: outer.FasterRunSettlementNtf.PlayerData:type_name -> outer.FasterRunSettlementPlayerData
	13, // 7: outer.FasterRunSettlementNtf.FinalSettlement:type_name -> outer.FasterRunFinialSettlement
	14, // 8: outer.FasterRunFinialSettlement.PlayerInfo:type_name -> outer.FasterRunFinialPlayerInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_fasterrun_proto_init() }
func file_fasterrun_proto_init() {
	if File_fasterrun_proto != nil {
		return
	}
	file_fasterruntype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fasterrun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunReadyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunReadyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayerReadyNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunReadyNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunDealNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayingNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunPlayCardNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunSettlementPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunSettlementNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunFinialSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasterrun_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FasterRunFinialPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fasterrun_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fasterrun_proto_goTypes,
		DependencyIndexes: file_fasterrun_proto_depIdxs,
		MessageInfos:      file_fasterrun_proto_msgTypes,
	}.Build()
	File_fasterrun_proto = out.File
	file_fasterrun_proto_rawDesc = nil
	file_fasterrun_proto_goTypes = nil
	file_fasterrun_proto_depIdxs = nil
}
