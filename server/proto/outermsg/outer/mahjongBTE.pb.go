// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: mahjongBTE.proto

package outer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 血战到底 游戏数据
type MahjongBTEGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           MahjongBTEState      `protobuf:"varint,1,opt,name=State,proto3,enum=outer.MahjongBTEState" json:"State,omitempty"` // 当前状态
	StateEnterAt    int64                `protobuf:"varint,2,opt,name=StateEnterAt,proto3" json:"StateEnterAt,omitempty"`              // 当前状态的进入时间(毫秒)
	StateEndAt      int64                `protobuf:"varint,3,opt,name=StateEndAt,proto3" json:"StateEndAt,omitempty"`                  // 当前状态的结算时间(毫秒)
	Players         []*MahjongPlayerInfo `protobuf:"bytes,4,rep,name=Players,proto3" json:"Players,omitempty"`                         // 东南西北 四方玩家信息
	Dices           []int32              `protobuf:"varint,5,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`                     // 定庄的2颗骰子数
	MasterIndex     int32                `protobuf:"varint,6,opt,name=MasterIndex,proto3" json:"MasterIndex,omitempty"`                // 庄家位置 东南西北(0-3)
	Ex3FromShortId  *Exchange3Info       `protobuf:"bytes,7,opt,name=Ex3FromShortId,proto3" json:"Ex3FromShortId,omitempty"`           // 换三张数据
	TotalCardsCount int32                `protobuf:"varint,8,opt,name=TotalCardsCount,proto3" json:"TotalCardsCount,omitempty"`        // 剩余总牌数
	Cards           []int32              `protobuf:"varint,9,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                     // 打出去的所有牌
	ActionShortId   int64                `protobuf:"varint,10,opt,name=ActionShortId,proto3" json:"ActionShortId,omitempty"`           // 当前操作者
	ActionEndAt     int64                `protobuf:"varint,11,opt,name=ActionEndAt,proto3" json:"ActionEndAt,omitempty"`               // 操作结束时间(毫秒)
	// 以下数据只发操作者本人
	ActionType []ActionType `protobuf:"varint,12,rep,packed,name=ActionType,proto3,enum=outer.ActionType" json:"ActionType,omitempty"` // 可操作类型，1.碰、2.杠、3.胡、4.出牌
	HuType     []HuType     `protobuf:"varint,13,rep,packed,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"`             // 可胡牌的类型
	GangCards  []int32      `protobuf:"varint,14,rep,packed,name=GangCards,proto3" json:"GangCards,omitempty"`                         // 可杠的牌 出牌时，手牌中可能已经存在多副杠牌
	NewCard    int32        `protobuf:"varint,15,opt,name=NewCard,proto3" json:"NewCard,omitempty"`                                    // 摸得的牌
}

func (x *MahjongBTEGameInfo) Reset() {
	*x = MahjongBTEGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEGameInfo) ProtoMessage() {}

func (x *MahjongBTEGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEGameInfo.ProtoReflect.Descriptor instead.
func (*MahjongBTEGameInfo) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongBTEGameInfo) GetState() MahjongBTEState {
	if x != nil {
		return x.State
	}
	return MahjongBTEState_BETStateReady
}

func (x *MahjongBTEGameInfo) GetStateEnterAt() int64 {
	if x != nil {
		return x.StateEnterAt
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetStateEndAt() int64 {
	if x != nil {
		return x.StateEndAt
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetPlayers() []*MahjongPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetMasterIndex() int32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetEx3FromShortId() *Exchange3Info {
	if x != nil {
		return x.Ex3FromShortId
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetTotalCardsCount() int32 {
	if x != nil {
		return x.TotalCardsCount
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetActionShortId() int64 {
	if x != nil {
		return x.ActionShortId
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetActionEndAt() int64 {
	if x != nil {
		return x.ActionEndAt
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetActionType() []ActionType {
	if x != nil {
		return x.ActionType
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetHuType() []HuType {
	if x != nil {
		return x.HuType
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetGangCards() []int32 {
	if x != nil {
		return x.GangCards
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetNewCard() int32 {
	if x != nil {
		return x.NewCard
	}
	return 0
}

// 血战到底 参与游戏的玩家数据
type MahjongPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId     int64       `protobuf:"varint,1,opt,name=ShortId,proto3" json:"ShortId,omitempty"`                              // 参与者短ID
	DecideColor ColorType   `protobuf:"varint,2,opt,name=DecideColor,proto3,enum=outer.ColorType" json:"DecideColor,omitempty"` // 定缺花色
	AllCards    *CardsOfBTE `protobuf:"bytes,3,opt,name=AllCards,proto3" json:"AllCards,omitempty"`                             // 玩家的所有牌，手牌、碰、杠
}

func (x *MahjongPlayerInfo) Reset() {
	*x = MahjongPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongPlayerInfo) ProtoMessage() {}

func (x *MahjongPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongPlayerInfo.ProtoReflect.Descriptor instead.
func (*MahjongPlayerInfo) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongPlayerInfo) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *MahjongPlayerInfo) GetDecideColor() ColorType {
	if x != nil {
		return x.DecideColor
	}
	return ColorType_CardUnknown
}

func (x *MahjongPlayerInfo) GetAllCards() *CardsOfBTE {
	if x != nil {
		return x.AllCards
	}
	return nil
}

// 血战到底 换三张数据
type Exchange3Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardsFrom     []int32 `protobuf:"varint,1,rep,packed,name=CardsFrom,proto3" json:"CardsFrom,omitempty"`  // 得到的牌
	FromSeatIndex int32   `protobuf:"varint,2,opt,name=FromSeatIndex,proto3" json:"FromSeatIndex,omitempty"` // 谁给的
	CardsTo       []int32 `protobuf:"varint,3,rep,packed,name=CardsTo,proto3" json:"CardsTo,omitempty"`      // 给出去的牌
	ToSeatIndex   int32   `protobuf:"varint,4,opt,name=ToSeatIndex,proto3" json:"ToSeatIndex,omitempty"`     // 给谁
}

func (x *Exchange3Info) Reset() {
	*x = Exchange3Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchange3Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchange3Info) ProtoMessage() {}

func (x *Exchange3Info) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exchange3Info.ProtoReflect.Descriptor instead.
func (*Exchange3Info) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{2}
}

func (x *Exchange3Info) GetCardsFrom() []int32 {
	if x != nil {
		return x.CardsFrom
	}
	return nil
}

func (x *Exchange3Info) GetFromSeatIndex() int32 {
	if x != nil {
		return x.FromSeatIndex
	}
	return 0
}

func (x *Exchange3Info) GetCardsTo() []int32 {
	if x != nil {
		return x.CardsTo
	}
	return nil
}

func (x *Exchange3Info) GetToSeatIndex() int32 {
	if x != nil {
		return x.ToSeatIndex
	}
	return 0
}

// 血战到底 牌数据
type CardsOfBTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards     []int32         `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                                                                                           // 手牌 (萬11-19 条21-29 筒31-39)
	LightGang map[int32]int64 `protobuf:"bytes,2,rep,name=LightGang,proto3" json:"LightGang,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 明杠
	DarkGang  map[int32]int64 `protobuf:"bytes,3,rep,name=DarkGang,proto3" json:"DarkGang,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // 暗杠
	Pong      map[int32]int64 `protobuf:"bytes,4,rep,name=Pong,proto3" json:"Pong,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`           // 碰
}

func (x *CardsOfBTE) Reset() {
	*x = CardsOfBTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsOfBTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsOfBTE) ProtoMessage() {}

func (x *CardsOfBTE) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsOfBTE.ProtoReflect.Descriptor instead.
func (*CardsOfBTE) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{3}
}

func (x *CardsOfBTE) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *CardsOfBTE) GetLightGang() map[int32]int64 {
	if x != nil {
		return x.LightGang
	}
	return nil
}

func (x *CardsOfBTE) GetDarkGang() map[int32]int64 {
	if x != nil {
		return x.DarkGang
	}
	return nil
}

func (x *CardsOfBTE) GetPong() map[int32]int64 {
	if x != nil {
		return x.Pong
	}
	return nil
}

// 最后一位操作牌的人(摸牌、出牌、明杠(下杠))
type LatestOperaCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card    int32 `protobuf:"varint,1,opt,name=Card,proto3" json:"Card,omitempty"`
	ShortId int64 `protobuf:"varint,2,opt,name=ShortId,proto3" json:"ShortId,omitempty"`
	Typ     int32 `protobuf:"varint,3,opt,name=Typ,proto3" json:"Typ,omitempty"` // 1.摸牌、2.出牌、3.杠
}

func (x *LatestOperaCard) Reset() {
	*x = LatestOperaCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestOperaCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestOperaCard) ProtoMessage() {}

func (x *LatestOperaCard) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestOperaCard.ProtoReflect.Descriptor instead.
func (*LatestOperaCard) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{4}
}

func (x *LatestOperaCard) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *LatestOperaCard) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *LatestOperaCard) GetTyp() int32 {
	if x != nil {
		return x.Typ
	}
	return 0
}

// //////////////////////////////////////////// 游戏操作请求 //////////////////////////////////////////////
// 换三张确定
type MahjongBTEExchange3Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []int32 `protobuf:"varint,1,rep,packed,name=Index,proto3" json:"Index,omitempty"` // 13张牌下标 0~12
}

func (x *MahjongBTEExchange3Req) Reset() {
	*x = MahjongBTEExchange3Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Req) ProtoMessage() {}

func (x *MahjongBTEExchange3Req) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Req.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Req) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongBTEExchange3Req) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type MahjongBTEExchange3Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEExchange3Rsp) Reset() {
	*x = MahjongBTEExchange3Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Rsp) ProtoMessage() {}

func (x *MahjongBTEExchange3Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Rsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Rsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{6}
}

// 定缺确定
type MahjongBTEDecideIgnoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color ColorType `protobuf:"varint,1,opt,name=color,proto3,enum=outer.ColorType" json:"color,omitempty"`
}

func (x *MahjongBTEDecideIgnoreReq) Reset() {
	*x = MahjongBTEDecideIgnoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreReq) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongBTEDecideIgnoreReq) GetColor() ColorType {
	if x != nil {
		return x.Color
	}
	return ColorType_CardUnknown
}

type MahjongBTEDecideIgnoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEDecideIgnoreRsp) Reset() {
	*x = MahjongBTEDecideIgnoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreRsp) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{8}
}

// 出牌
type MahjongBTEPlayCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"` // 手牌下标 0开始
}

func (x *MahjongBTEPlayCardReq) Reset() {
	*x = MahjongBTEPlayCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEPlayCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEPlayCardReq) ProtoMessage() {}

func (x *MahjongBTEPlayCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEPlayCardReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEPlayCardReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongBTEPlayCardReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type MahjongBTEPlayCardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllCards *CardsOfBTE `protobuf:"bytes,1,opt,name=AllCards,proto3" json:"AllCards,omitempty"` // 玩家的所有牌，手牌、碰、杠
}

func (x *MahjongBTEPlayCardRsp) Reset() {
	*x = MahjongBTEPlayCardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEPlayCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEPlayCardRsp) ProtoMessage() {}

func (x *MahjongBTEPlayCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEPlayCardRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEPlayCardRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongBTEPlayCardRsp) GetAllCards() *CardsOfBTE {
	if x != nil {
		return x.AllCards
	}
	return nil
}

// 执行操作 过、碰、杠、胡
type MahjongBTEOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType ActionType `protobuf:"varint,1,opt,name=ActionType,proto3,enum=outer.ActionType" json:"ActionType,omitempty"`
	Hu         HuType     `protobuf:"varint,2,opt,name=Hu,proto3,enum=outer.HuType" json:"Hu,omitempty"` // 胡的牌型
	Gang       int32      `protobuf:"varint,3,opt,name=Gang,proto3" json:"Gang,omitempty"`               // 杠的牌
}

func (x *MahjongBTEOperateReq) Reset() {
	*x = MahjongBTEOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperateReq) ProtoMessage() {}

func (x *MahjongBTEOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{11}
}

func (x *MahjongBTEOperateReq) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ActionPass
}

func (x *MahjongBTEOperateReq) GetHu() HuType {
	if x != nil {
		return x.Hu
	}
	return HuType_HuTypeUnknown
}

func (x *MahjongBTEOperateReq) GetGang() int32 {
	if x != nil {
		return x.Gang
	}
	return 0
}

type MahjongBTEOperateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllCards *CardsOfBTE `protobuf:"bytes,1,opt,name=AllCards,proto3" json:"AllCards,omitempty"` // 玩家的所有牌，手牌、碰、杠
}

func (x *MahjongBTEOperateRsp) Reset() {
	*x = MahjongBTEOperateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperateRsp) ProtoMessage() {}

func (x *MahjongBTEOperateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperateRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperateRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongBTEOperateRsp) GetAllCards() *CardsOfBTE {
	if x != nil {
		return x.AllCards
	}
	return nil
}

// //////////////////////////////////////////// 游戏通知 //////////////////////////////////////////////
// 进入准备中，（结算结束后会通知）
type MahjongBTEReadyNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEReadyNtf) Reset() {
	*x = MahjongBTEReadyNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEReadyNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEReadyNtf) ProtoMessage() {}

func (x *MahjongBTEReadyNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEReadyNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEReadyNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{13}
}

// 开始定庄
type MahjongBTEDecideMasterNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dices       []int32 `protobuf:"varint,1,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`      // 两颗骰子数
	MasterIndex int32   `protobuf:"varint,2,opt,name=MasterIndex,proto3" json:"MasterIndex,omitempty"` // 庄家位置 0,1,2,3
}

func (x *MahjongBTEDecideMasterNtf) Reset() {
	*x = MahjongBTEDecideMasterNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideMasterNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideMasterNtf) ProtoMessage() {}

func (x *MahjongBTEDecideMasterNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideMasterNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideMasterNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{14}
}

func (x *MahjongBTEDecideMasterNtf) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *MahjongBTEDecideMasterNtf) GetMasterIndex() int32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

// 开始发牌通知
type MahjongBTEDealNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 手牌 (萬11-19 条21-29 筒31-39)
}

func (x *MahjongBTEDealNtf) Reset() {
	*x = MahjongBTEDealNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDealNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDealNtf) ProtoMessage() {}

func (x *MahjongBTEDealNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDealNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDealNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongBTEDealNtf) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 开始换三张
type MahjongBTEExchange3Ntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEExchange3Ntf) Reset() {
	*x = MahjongBTEExchange3Ntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Ntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Ntf) ProtoMessage() {}

func (x *MahjongBTEExchange3Ntf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Ntf.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Ntf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{16}
}

// 换三张结束
type MahjongBTEExchange3EndNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ex3Info *Exchange3Info `protobuf:"bytes,1,opt,name=Ex3Info,proto3" json:"Ex3Info,omitempty"`     // 换牌信息
	Cards   []int32        `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 最新手牌 (萬11-19 条21-29 筒31-39)
}

func (x *MahjongBTEExchange3EndNtf) Reset() {
	*x = MahjongBTEExchange3EndNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3EndNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3EndNtf) ProtoMessage() {}

func (x *MahjongBTEExchange3EndNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3EndNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3EndNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongBTEExchange3EndNtf) GetEx3Info() *Exchange3Info {
	if x != nil {
		return x.Ex3Info
	}
	return nil
}

func (x *MahjongBTEExchange3EndNtf) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 开始定缺通知
type MahjongBTEDecideIgnoreNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEDecideIgnoreNtf) Reset() {
	*x = MahjongBTEDecideIgnoreNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreNtf) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{18}
}

// 定缺结束
type MahjongBTEDecideIgnoreEndNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colors map[int64]ColorType `protobuf:"bytes,1,rep,name=Colors,proto3" json:"Colors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=outer.ColorType"` // 每位玩家的定缺花色 map<短ID，定缺花色>
}

func (x *MahjongBTEDecideIgnoreEndNtf) Reset() {
	*x = MahjongBTEDecideIgnoreEndNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreEndNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreEndNtf) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreEndNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreEndNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreEndNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongBTEDecideIgnoreEndNtf) GetColors() map[int64]ColorType {
	if x != nil {
		return x.Colors
	}
	return nil
}

// 开始游戏通知
type MahjongBTEPlayingNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEPlayingNtf) Reset() {
	*x = MahjongBTEPlayingNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEPlayingNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEPlayingNtf) ProtoMessage() {}

func (x *MahjongBTEPlayingNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEPlayingNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEPlayingNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{20}
}

// 玩家轮动通知
type MahjongBTETurnNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCards    int32 `protobuf:"varint,1,opt,name=TotalCards,proto3" json:"TotalCards,omitempty"`       // 剩余总牌数
	ActionShortId int64 `protobuf:"varint,2,opt,name=ActionShortId,proto3" json:"ActionShortId,omitempty"` // 操作者 如果是0，表示等待其他玩家碰、杠、胡、过、操作
	ActionEndAt   int64 `protobuf:"varint,3,opt,name=ActionEndAt,proto3" json:"ActionEndAt,omitempty"`     // 操作结束时间(毫秒)
	// 以下数据只发操作者本人
	ActionType []ActionType `protobuf:"varint,4,rep,packed,name=ActionType,proto3,enum=outer.ActionType" json:"ActionType,omitempty"` // 可操作类型，1.碰、2.杠、3.胡、4.出牌
	HuType     []HuType     `protobuf:"varint,5,rep,packed,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"`             // 可胡牌的类型
	GangCards  []int32      `protobuf:"varint,6,rep,packed,name=GangCards,proto3" json:"GangCards,omitempty"`                         // 可杠的牌 出牌时，手牌中可能已经存在多副杠牌
	NewCard    int32        `protobuf:"varint,7,opt,name=NewCard,proto3" json:"NewCard,omitempty"`                                    // 摸到的牌(仅用于出牌)
}

func (x *MahjongBTETurnNtf) Reset() {
	*x = MahjongBTETurnNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTETurnNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTETurnNtf) ProtoMessage() {}

func (x *MahjongBTETurnNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTETurnNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTETurnNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{21}
}

func (x *MahjongBTETurnNtf) GetTotalCards() int32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionShortId() int64 {
	if x != nil {
		return x.ActionShortId
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionEndAt() int64 {
	if x != nil {
		return x.ActionEndAt
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionType() []ActionType {
	if x != nil {
		return x.ActionType
	}
	return nil
}

func (x *MahjongBTETurnNtf) GetHuType() []HuType {
	if x != nil {
		return x.HuType
	}
	return nil
}

func (x *MahjongBTETurnNtf) GetGangCards() []int32 {
	if x != nil {
		return x.GangCards
	}
	return nil
}

func (x *MahjongBTETurnNtf) GetNewCard() int32 {
	if x != nil {
		return x.NewCard
	}
	return 0
}

// 玩家操作结果通知
type MahjongBTEOperaNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpShortId       int64      `protobuf:"varint,1,opt,name=OpShortId,proto3" json:"OpShortId,omitempty"`                 // 操作者
	OpType          ActionType `protobuf:"varint,3,opt,name=OpType,proto3,enum=outer.ActionType" json:"OpType,omitempty"` // 操作类型，1.碰、2.杠、3.胡、4.出牌
	HuType          HuType     `protobuf:"varint,4,opt,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"`     // 胡牌类型
	QiangGangHuCard int32      `protobuf:"varint,5,opt,name=QiangGangHuCard,proto3" json:"QiangGangHuCard,omitempty"`     // 抢杠胡的牌
	GangType        int32      `protobuf:"varint,6,opt,name=GangType,proto3" json:"GangType,omitempty"`                   // 1.明杠、2.暗杠
	Card            int32      `protobuf:"varint,7,opt,name=Card,proto3" json:"Card,omitempty"`                           // 碰、杠、出牌的牌
}

func (x *MahjongBTEOperaNtf) Reset() {
	*x = MahjongBTEOperaNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperaNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperaNtf) ProtoMessage() {}

func (x *MahjongBTEOperaNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperaNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperaNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{22}
}

func (x *MahjongBTEOperaNtf) GetOpShortId() int64 {
	if x != nil {
		return x.OpShortId
	}
	return 0
}

func (x *MahjongBTEOperaNtf) GetOpType() ActionType {
	if x != nil {
		return x.OpType
	}
	return ActionType_ActionPass
}

func (x *MahjongBTEOperaNtf) GetHuType() HuType {
	if x != nil {
		return x.HuType
	}
	return HuType_HuTypeUnknown
}

func (x *MahjongBTEOperaNtf) GetQiangGangHuCard() int32 {
	if x != nil {
		return x.QiangGangHuCard
	}
	return 0
}

func (x *MahjongBTEOperaNtf) GetGangType() int32 {
	if x != nil {
		return x.GangType
	}
	return 0
}

func (x *MahjongBTEOperaNtf) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

// 结算通知
type MahjongBTESettlementNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTESettlementNtf) Reset() {
	*x = MahjongBTESettlementNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTESettlementNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTESettlementNtf) ProtoMessage() {}

func (x *MahjongBTESettlementNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTESettlementNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTESettlementNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{23}
}

var File_mahjongBTE_proto protoreflect.FileDescriptor

var file_mahjongBTE_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x11, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x04, 0x0a,
	0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x33, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x45, 0x78, 0x33, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x48, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x63,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x08, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x42,
	0x54, 0x45, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x8f, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x54, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x84,
	0x03, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x42, 0x54, 0x45, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x42, 0x54, 0x45, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47,
	0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47,
	0x61, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x4f, 0x66, 0x42, 0x54, 0x45, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x42, 0x54,
	0x45, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x50, 0x6f, 0x6e,
	0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x44, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09,
	0x50, 0x6f, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x79, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x79, 0x70, 0x22, 0x2e, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x52,
	0x73, 0x70, 0x22, 0x43, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x2d, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42,
	0x54, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x46, 0x0a, 0x15, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08,
	0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x66, 0x42, 0x54,
	0x45, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x14, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x48, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x02, 0x48, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x47, 0x61, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x14, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x4f, 0x66, 0x42, 0x54, 0x45, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x4e, 0x74, 0x66, 0x22, 0x53, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x29, 0x0a, 0x11, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x61, 0x6c, 0x4e, 0x74, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x4e, 0x74, 0x66,
	0x22, 0x61, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x64, 0x4e, 0x74, 0x66, 0x12, 0x2e, 0x0a,
	0x07, 0x45, 0x78, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x45, 0x78, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54,
	0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x74, 0x66,
	0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x4e, 0x74,
	0x66, 0x12, 0x47, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x45, 0x6e, 0x64, 0x4e, 0x74, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x4b, 0x0a, 0x0b, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x22,
	0x8d, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x54, 0x75,
	0x72, 0x6e, 0x4e, 0x74, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6e, 0x67, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6e, 0x67,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x22,
	0xde, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x4e, 0x74, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x70, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47,
	0x61, 0x6e, 0x67, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x51, 0x69, 0x61, 0x6e, 0x67, 0x47, 0x61, 0x6e, 0x67, 0x48, 0x75, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x42, 0x08, 0x5a, 0x06, 0x2f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongBTE_proto_rawDescOnce sync.Once
	file_mahjongBTE_proto_rawDescData = file_mahjongBTE_proto_rawDesc
)

func file_mahjongBTE_proto_rawDescGZIP() []byte {
	file_mahjongBTE_proto_rawDescOnce.Do(func() {
		file_mahjongBTE_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongBTE_proto_rawDescData)
	})
	return file_mahjongBTE_proto_rawDescData
}

var file_mahjongBTE_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_mahjongBTE_proto_goTypes = []interface{}{
	(*MahjongBTEGameInfo)(nil),           // 0: outer.MahjongBTEGameInfo
	(*MahjongPlayerInfo)(nil),            // 1: outer.MahjongPlayerInfo
	(*Exchange3Info)(nil),                // 2: outer.Exchange3Info
	(*CardsOfBTE)(nil),                   // 3: outer.CardsOfBTE
	(*LatestOperaCard)(nil),              // 4: outer.LatestOperaCard
	(*MahjongBTEExchange3Req)(nil),       // 5: outer.MahjongBTEExchange3Req
	(*MahjongBTEExchange3Rsp)(nil),       // 6: outer.MahjongBTEExchange3Rsp
	(*MahjongBTEDecideIgnoreReq)(nil),    // 7: outer.MahjongBTEDecideIgnoreReq
	(*MahjongBTEDecideIgnoreRsp)(nil),    // 8: outer.MahjongBTEDecideIgnoreRsp
	(*MahjongBTEPlayCardReq)(nil),        // 9: outer.MahjongBTEPlayCardReq
	(*MahjongBTEPlayCardRsp)(nil),        // 10: outer.MahjongBTEPlayCardRsp
	(*MahjongBTEOperateReq)(nil),         // 11: outer.MahjongBTEOperateReq
	(*MahjongBTEOperateRsp)(nil),         // 12: outer.MahjongBTEOperateRsp
	(*MahjongBTEReadyNtf)(nil),           // 13: outer.MahjongBTEReadyNtf
	(*MahjongBTEDecideMasterNtf)(nil),    // 14: outer.MahjongBTEDecideMasterNtf
	(*MahjongBTEDealNtf)(nil),            // 15: outer.MahjongBTEDealNtf
	(*MahjongBTEExchange3Ntf)(nil),       // 16: outer.MahjongBTEExchange3Ntf
	(*MahjongBTEExchange3EndNtf)(nil),    // 17: outer.MahjongBTEExchange3EndNtf
	(*MahjongBTEDecideIgnoreNtf)(nil),    // 18: outer.MahjongBTEDecideIgnoreNtf
	(*MahjongBTEDecideIgnoreEndNtf)(nil), // 19: outer.MahjongBTEDecideIgnoreEndNtf
	(*MahjongBTEPlayingNtf)(nil),         // 20: outer.MahjongBTEPlayingNtf
	(*MahjongBTETurnNtf)(nil),            // 21: outer.MahjongBTETurnNtf
	(*MahjongBTEOperaNtf)(nil),           // 22: outer.MahjongBTEOperaNtf
	(*MahjongBTESettlementNtf)(nil),      // 23: outer.MahjongBTESettlementNtf
	nil,                                  // 24: outer.CardsOfBTE.LightGangEntry
	nil,                                  // 25: outer.CardsOfBTE.DarkGangEntry
	nil,                                  // 26: outer.CardsOfBTE.PongEntry
	nil,                                  // 27: outer.MahjongBTEDecideIgnoreEndNtf.ColorsEntry
	(MahjongBTEState)(0),                 // 28: outer.MahjongBTEState
	(ActionType)(0),                      // 29: outer.ActionType
	(HuType)(0),                          // 30: outer.HuType
	(ColorType)(0),                       // 31: outer.ColorType
}
var file_mahjongBTE_proto_depIdxs = []int32{
	28, // 0: outer.MahjongBTEGameInfo.State:type_name -> outer.MahjongBTEState
	1,  // 1: outer.MahjongBTEGameInfo.Players:type_name -> outer.MahjongPlayerInfo
	2,  // 2: outer.MahjongBTEGameInfo.Ex3FromShortId:type_name -> outer.Exchange3Info
	29, // 3: outer.MahjongBTEGameInfo.ActionType:type_name -> outer.ActionType
	30, // 4: outer.MahjongBTEGameInfo.HuType:type_name -> outer.HuType
	31, // 5: outer.MahjongPlayerInfo.DecideColor:type_name -> outer.ColorType
	3,  // 6: outer.MahjongPlayerInfo.AllCards:type_name -> outer.CardsOfBTE
	24, // 7: outer.CardsOfBTE.LightGang:type_name -> outer.CardsOfBTE.LightGangEntry
	25, // 8: outer.CardsOfBTE.DarkGang:type_name -> outer.CardsOfBTE.DarkGangEntry
	26, // 9: outer.CardsOfBTE.Pong:type_name -> outer.CardsOfBTE.PongEntry
	31, // 10: outer.MahjongBTEDecideIgnoreReq.color:type_name -> outer.ColorType
	3,  // 11: outer.MahjongBTEPlayCardRsp.AllCards:type_name -> outer.CardsOfBTE
	29, // 12: outer.MahjongBTEOperateReq.ActionType:type_name -> outer.ActionType
	30, // 13: outer.MahjongBTEOperateReq.Hu:type_name -> outer.HuType
	3,  // 14: outer.MahjongBTEOperateRsp.AllCards:type_name -> outer.CardsOfBTE
	2,  // 15: outer.MahjongBTEExchange3EndNtf.Ex3Info:type_name -> outer.Exchange3Info
	27, // 16: outer.MahjongBTEDecideIgnoreEndNtf.Colors:type_name -> outer.MahjongBTEDecideIgnoreEndNtf.ColorsEntry
	29, // 17: outer.MahjongBTETurnNtf.ActionType:type_name -> outer.ActionType
	30, // 18: outer.MahjongBTETurnNtf.HuType:type_name -> outer.HuType
	29, // 19: outer.MahjongBTEOperaNtf.OpType:type_name -> outer.ActionType
	30, // 20: outer.MahjongBTEOperaNtf.HuType:type_name -> outer.HuType
	31, // 21: outer.MahjongBTEDecideIgnoreEndNtf.ColorsEntry.value:type_name -> outer.ColorType
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_mahjongBTE_proto_init() }
func file_mahjongBTE_proto_init() {
	if File_mahjongBTE_proto != nil {
		return
	}
	file_mahjongtype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongBTE_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exchange3Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsOfBTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestOperaCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEPlayCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEPlayCardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEReadyNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideMasterNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDealNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Ntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3EndNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreEndNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEPlayingNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTETurnNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperaNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTESettlementNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongBTE_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongBTE_proto_goTypes,
		DependencyIndexes: file_mahjongBTE_proto_depIdxs,
		MessageInfos:      file_mahjongBTE_proto_msgTypes,
	}.Build()
	File_mahjongBTE_proto = out.File
	file_mahjongBTE_proto_rawDesc = nil
	file_mahjongBTE_proto_goTypes = nil
	file_mahjongBTE_proto_depIdxs = nil
}
