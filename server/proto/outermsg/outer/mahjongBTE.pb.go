// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: mahjongBTE.proto

package outer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 血战到底 游戏数据
type MahjongBTEGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           MahjongBTEState      `protobuf:"varint,1,opt,name=State,proto3,enum=outer.MahjongBTEState" json:"State,omitempty"` // 当前状态
	StateEnterAt    int64                `protobuf:"varint,2,opt,name=StateEnterAt,proto3" json:"StateEnterAt,omitempty"`              // 当前状态的进入时间(毫秒)
	StateEndAt      int64                `protobuf:"varint,3,opt,name=StateEndAt,proto3" json:"StateEndAt,omitempty"`                  // 当前状态的结算时间(毫秒)
	Players         []*MahjongPlayerInfo `protobuf:"bytes,4,rep,name=Players,proto3" json:"Players,omitempty"`                         // 东南西北 四方玩家信息
	Dices           []int32              `protobuf:"varint,5,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`                     // 定庄的2颗骰子数
	MasterIndex     int32                `protobuf:"varint,6,opt,name=MasterIndex,proto3" json:"MasterIndex,omitempty"`                // 庄家位置 东南西北(0-3)
	Ex3FromShortId  *Exchange3Info       `protobuf:"bytes,7,opt,name=Ex3FromShortId,proto3" json:"Ex3FromShortId,omitempty"`           // 换三张数据
	TotalCardsCount int32                `protobuf:"varint,8,opt,name=TotalCardsCount,proto3" json:"TotalCardsCount,omitempty"`        // 剩余总牌数
	ActionShortId   int64                `protobuf:"varint,9,opt,name=ActionShortId,proto3" json:"ActionShortId,omitempty"`            // 当前执行者
	ActionType      int64                `protobuf:"varint,10,opt,name=ActionType,proto3" json:"ActionType,omitempty"`                 // 操作类型 0.过、1.碰、2.杠、3.胡
	HuType          HuType               `protobuf:"varint,11,opt,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"`       // 胡牌类型
	NewCard         int32                `protobuf:"varint,12,opt,name=NewCard,proto3" json:"NewCard,omitempty"`                       // 摸得的牌
	OpEndAt         int64                `protobuf:"varint,13,opt,name=OpEndAt,proto3" json:"OpEndAt,omitempty"`                       // 操作结束结束时间(毫秒)
}

func (x *MahjongBTEGameInfo) Reset() {
	*x = MahjongBTEGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEGameInfo) ProtoMessage() {}

func (x *MahjongBTEGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEGameInfo.ProtoReflect.Descriptor instead.
func (*MahjongBTEGameInfo) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{0}
}

func (x *MahjongBTEGameInfo) GetState() MahjongBTEState {
	if x != nil {
		return x.State
	}
	return MahjongBTEState_BETStateReady
}

func (x *MahjongBTEGameInfo) GetStateEnterAt() int64 {
	if x != nil {
		return x.StateEnterAt
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetStateEndAt() int64 {
	if x != nil {
		return x.StateEndAt
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetPlayers() []*MahjongPlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetMasterIndex() int32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetEx3FromShortId() *Exchange3Info {
	if x != nil {
		return x.Ex3FromShortId
	}
	return nil
}

func (x *MahjongBTEGameInfo) GetTotalCardsCount() int32 {
	if x != nil {
		return x.TotalCardsCount
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetActionShortId() int64 {
	if x != nil {
		return x.ActionShortId
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetActionType() int64 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetHuType() HuType {
	if x != nil {
		return x.HuType
	}
	return HuType_HuTypeUnknown
}

func (x *MahjongBTEGameInfo) GetNewCard() int32 {
	if x != nil {
		return x.NewCard
	}
	return 0
}

func (x *MahjongBTEGameInfo) GetOpEndAt() int64 {
	if x != nil {
		return x.OpEndAt
	}
	return 0
}

// 血战到底 参与游戏的玩家数据
type MahjongPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId     int64           `protobuf:"varint,1,opt,name=ShortId,proto3" json:"ShortId,omitempty"`                                                                                              // 参与者短ID
	DecideColor ColorType       `protobuf:"varint,2,opt,name=DecideColor,proto3,enum=outer.ColorType" json:"DecideColor,omitempty"`                                                                 // 定缺花色
	Cards       []int32         `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                                                                                           // 手牌 (萬11-19 条21-29 筒31-39)
	CardsPong   map[int32]int64 `protobuf:"bytes,4,rep,name=CardsPong,proto3" json:"CardsPong,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 碰的牌组 <牌，出牌人shortId>
	CardsGang   map[int32]int64 `protobuf:"bytes,5,rep,name=CardsGang,proto3" json:"CardsGang,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 杠的牌组 <牌，出牌人shortId>
}

func (x *MahjongPlayerInfo) Reset() {
	*x = MahjongPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongPlayerInfo) ProtoMessage() {}

func (x *MahjongPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongPlayerInfo.ProtoReflect.Descriptor instead.
func (*MahjongPlayerInfo) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{1}
}

func (x *MahjongPlayerInfo) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *MahjongPlayerInfo) GetDecideColor() ColorType {
	if x != nil {
		return x.DecideColor
	}
	return ColorType_CardUnknown
}

func (x *MahjongPlayerInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongPlayerInfo) GetCardsPong() map[int32]int64 {
	if x != nil {
		return x.CardsPong
	}
	return nil
}

func (x *MahjongPlayerInfo) GetCardsGang() map[int32]int64 {
	if x != nil {
		return x.CardsGang
	}
	return nil
}

// 血战到底 换三张数据
type Exchange3Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardsFrom   []int32 `protobuf:"varint,1,rep,packed,name=CardsFrom,proto3" json:"CardsFrom,omitempty"` // 得到的牌
	FromShortId int32   `protobuf:"varint,2,opt,name=FromShortId,proto3" json:"FromShortId,omitempty"`    // 谁给的
	CardsTo     []int32 `protobuf:"varint,3,rep,packed,name=CardsTo,proto3" json:"CardsTo,omitempty"`     // 给出去的牌
	ToShortId   int32   `protobuf:"varint,4,opt,name=ToShortId,proto3" json:"ToShortId,omitempty"`        // 给谁
}

func (x *Exchange3Info) Reset() {
	*x = Exchange3Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchange3Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchange3Info) ProtoMessage() {}

func (x *Exchange3Info) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exchange3Info.ProtoReflect.Descriptor instead.
func (*Exchange3Info) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{2}
}

func (x *Exchange3Info) GetCardsFrom() []int32 {
	if x != nil {
		return x.CardsFrom
	}
	return nil
}

func (x *Exchange3Info) GetFromShortId() int32 {
	if x != nil {
		return x.FromShortId
	}
	return 0
}

func (x *Exchange3Info) GetCardsTo() []int32 {
	if x != nil {
		return x.CardsTo
	}
	return nil
}

func (x *Exchange3Info) GetToShortId() int32 {
	if x != nil {
		return x.ToShortId
	}
	return 0
}

// //////////////////////////////////////////// 游戏操作请求 //////////////////////////////////////////////
// 换三张确定
type MahjongBTEExchange3Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []int32 `protobuf:"varint,1,rep,packed,name=Index,proto3" json:"Index,omitempty"` // 13张牌下标 0~12
}

func (x *MahjongBTEExchange3Req) Reset() {
	*x = MahjongBTEExchange3Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Req) ProtoMessage() {}

func (x *MahjongBTEExchange3Req) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Req.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Req) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{3}
}

func (x *MahjongBTEExchange3Req) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type MahjongBTEExchange3Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEExchange3Rsp) Reset() {
	*x = MahjongBTEExchange3Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Rsp) ProtoMessage() {}

func (x *MahjongBTEExchange3Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Rsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Rsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{4}
}

// 定缺确定
type MahjongBTEDecideIgnoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color ColorType `protobuf:"varint,1,opt,name=color,proto3,enum=outer.ColorType" json:"color,omitempty"`
}

func (x *MahjongBTEDecideIgnoreReq) Reset() {
	*x = MahjongBTEDecideIgnoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreReq) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{5}
}

func (x *MahjongBTEDecideIgnoreReq) GetColor() ColorType {
	if x != nil {
		return x.Color
	}
	return ColorType_CardUnknown
}

type MahjongBTEDecideIgnoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEDecideIgnoreRsp) Reset() {
	*x = MahjongBTEDecideIgnoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreRsp) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{6}
}

// 出牌
type MahjongBTEDealReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"` // 手牌下标 0开始
}

func (x *MahjongBTEDealReq) Reset() {
	*x = MahjongBTEDealReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDealReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDealReq) ProtoMessage() {}

func (x *MahjongBTEDealReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDealReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEDealReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{7}
}

func (x *MahjongBTEDealReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type MahjongBTEDealRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards    []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`       // 最新手牌
	CardPong []int32 `protobuf:"varint,2,rep,packed,name=CardPong,proto3" json:"CardPong,omitempty"` // 碰的牌组
	CardGang []int32 `protobuf:"varint,3,rep,packed,name=CardGang,proto3" json:"CardGang,omitempty"` // 杠的牌组
}

func (x *MahjongBTEDealRsp) Reset() {
	*x = MahjongBTEDealRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDealRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDealRsp) ProtoMessage() {}

func (x *MahjongBTEDealRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDealRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEDealRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{8}
}

func (x *MahjongBTEDealRsp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongBTEDealRsp) GetCardPong() []int32 {
	if x != nil {
		return x.CardPong
	}
	return nil
}

func (x *MahjongBTEDealRsp) GetCardGang() []int32 {
	if x != nil {
		return x.CardGang
	}
	return nil
}

// 执行操作 过、碰、杠、胡
type MahjongBTEOperateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType ActionType `protobuf:"varint,1,opt,name=ActionType,proto3,enum=outer.ActionType" json:"ActionType,omitempty"`
}

func (x *MahjongBTEOperateReq) Reset() {
	*x = MahjongBTEOperateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperateReq) ProtoMessage() {}

func (x *MahjongBTEOperateReq) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperateReq.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperateReq) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{9}
}

func (x *MahjongBTEOperateReq) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ActionPass
}

type MahjongBTEOperateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards    []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`       // 最新手牌
	CardPong []int32 `protobuf:"varint,2,rep,packed,name=CardPong,proto3" json:"CardPong,omitempty"` // 碰的牌组 数组长度表示几组碰，值代表牌
	CardGang []int32 `protobuf:"varint,3,rep,packed,name=CardGang,proto3" json:"CardGang,omitempty"` // 杠的牌组 数组长度表示几组杠，值代表牌
}

func (x *MahjongBTEOperateRsp) Reset() {
	*x = MahjongBTEOperateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperateRsp) ProtoMessage() {}

func (x *MahjongBTEOperateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperateRsp.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperateRsp) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongBTEOperateRsp) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MahjongBTEOperateRsp) GetCardPong() []int32 {
	if x != nil {
		return x.CardPong
	}
	return nil
}

func (x *MahjongBTEOperateRsp) GetCardGang() []int32 {
	if x != nil {
		return x.CardGang
	}
	return nil
}

// //////////////////////////////////////////// 游戏通知 //////////////////////////////////////////////
// 进入准备中，（结算结束后会通知）
type MahjongBTEReadyNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEReadyNtf) Reset() {
	*x = MahjongBTEReadyNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEReadyNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEReadyNtf) ProtoMessage() {}

func (x *MahjongBTEReadyNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEReadyNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEReadyNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{11}
}

// 开始定庄
type MahjongBTEDecideMasterNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dices       []int32 `protobuf:"varint,1,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`      // 两颗骰子数
	MasterIndex int32   `protobuf:"varint,2,opt,name=MasterIndex,proto3" json:"MasterIndex,omitempty"` // 庄家位置 0,1,2,3
}

func (x *MahjongBTEDecideMasterNtf) Reset() {
	*x = MahjongBTEDecideMasterNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideMasterNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideMasterNtf) ProtoMessage() {}

func (x *MahjongBTEDecideMasterNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideMasterNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideMasterNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{12}
}

func (x *MahjongBTEDecideMasterNtf) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *MahjongBTEDecideMasterNtf) GetMasterIndex() int32 {
	if x != nil {
		return x.MasterIndex
	}
	return 0
}

// 开始发牌通知
type MahjongBTEDealNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 手牌 (萬11-19 条21-29 筒31-39)
}

func (x *MahjongBTEDealNtf) Reset() {
	*x = MahjongBTEDealNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDealNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDealNtf) ProtoMessage() {}

func (x *MahjongBTEDealNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDealNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDealNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{13}
}

func (x *MahjongBTEDealNtf) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 开始换三张
type MahjongBTEExchange3Ntf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEExchange3Ntf) Reset() {
	*x = MahjongBTEExchange3Ntf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3Ntf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3Ntf) ProtoMessage() {}

func (x *MahjongBTEExchange3Ntf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3Ntf.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3Ntf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{14}
}

// 换三张结束
type MahjongBTEExchange3EndNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortId      int64   `protobuf:"varint,1,opt,name=ShortId,proto3" json:"ShortId,omitempty"`                  // 换牌的玩家短id
	ThreeCardOut []int32 `protobuf:"varint,2,rep,packed,name=ThreeCardOut,proto3" json:"ThreeCardOut,omitempty"` // 换出的三张牌
	ThreeCardIn  []int32 `protobuf:"varint,3,rep,packed,name=ThreeCardIn,proto3" json:"ThreeCardIn,omitempty"`   // 换来的三张牌
	Cards        []int32 `protobuf:"varint,4,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`               // 最新手牌 (萬11-19 条21-29 筒31-39)
}

func (x *MahjongBTEExchange3EndNtf) Reset() {
	*x = MahjongBTEExchange3EndNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEExchange3EndNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEExchange3EndNtf) ProtoMessage() {}

func (x *MahjongBTEExchange3EndNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEExchange3EndNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEExchange3EndNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{15}
}

func (x *MahjongBTEExchange3EndNtf) GetShortId() int64 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

func (x *MahjongBTEExchange3EndNtf) GetThreeCardOut() []int32 {
	if x != nil {
		return x.ThreeCardOut
	}
	return nil
}

func (x *MahjongBTEExchange3EndNtf) GetThreeCardIn() []int32 {
	if x != nil {
		return x.ThreeCardIn
	}
	return nil
}

func (x *MahjongBTEExchange3EndNtf) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 开始定缺通知
type MahjongBTEDecideIgnoreNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MahjongBTEDecideIgnoreNtf) Reset() {
	*x = MahjongBTEDecideIgnoreNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEDecideIgnoreNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEDecideIgnoreNtf) ProtoMessage() {}

func (x *MahjongBTEDecideIgnoreNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEDecideIgnoreNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEDecideIgnoreNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{16}
}

// 开始游戏通知
type MahjongBTEPlayingNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colors map[int64]ColorType `protobuf:"bytes,1,rep,name=Colors,proto3" json:"Colors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=outer.ColorType"` // 每位玩家的定缺花色 map<短ID，定缺花色>
}

func (x *MahjongBTEPlayingNtf) Reset() {
	*x = MahjongBTEPlayingNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEPlayingNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEPlayingNtf) ProtoMessage() {}

func (x *MahjongBTEPlayingNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEPlayingNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEPlayingNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{17}
}

func (x *MahjongBTEPlayingNtf) GetColors() map[int64]ColorType {
	if x != nil {
		return x.Colors
	}
	return nil
}

// 玩家轮动通知
type MahjongBTETurnNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCards    int32      `protobuf:"varint,1,opt,name=TotalCards,proto3" json:"TotalCards,omitempty"`                       // 剩余总牌数
	ActionShortId int64      `protobuf:"varint,2,opt,name=ActionShortId,proto3" json:"ActionShortId,omitempty"`                 // 操作者
	ActionType    ActionType `protobuf:"varint,3,opt,name=ActionType,proto3,enum=outer.ActionType" json:"ActionType,omitempty"` // 操作类型，1.碰、2.杠、3.胡、4.出牌
	HuType        HuType     `protobuf:"varint,4,opt,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"`             // 胡牌类型
	NewCard       int32      `protobuf:"varint,5,opt,name=NewCard,proto3" json:"NewCard,omitempty"`                             // 摸牌
	ActionEndAt   int64      `protobuf:"varint,6,opt,name=ActionEndAt,proto3" json:"ActionEndAt,omitempty"`                     // 操作结束时间(毫秒)
}

func (x *MahjongBTETurnNtf) Reset() {
	*x = MahjongBTETurnNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTETurnNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTETurnNtf) ProtoMessage() {}

func (x *MahjongBTETurnNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTETurnNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTETurnNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{18}
}

func (x *MahjongBTETurnNtf) GetTotalCards() int32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionShortId() int64 {
	if x != nil {
		return x.ActionShortId
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ActionPass
}

func (x *MahjongBTETurnNtf) GetHuType() HuType {
	if x != nil {
		return x.HuType
	}
	return HuType_HuTypeUnknown
}

func (x *MahjongBTETurnNtf) GetNewCard() int32 {
	if x != nil {
		return x.NewCard
	}
	return 0
}

func (x *MahjongBTETurnNtf) GetActionEndAt() int64 {
	if x != nil {
		return x.ActionEndAt
	}
	return 0
}

// 玩家操作结果通知
type MahjongBTEOperaNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpShortId int64  `protobuf:"varint,1,opt,name=OpShortId,proto3" json:"OpShortId,omitempty"`             // 操作者
	OpType    int32  `protobuf:"varint,3,opt,name=OpType,proto3" json:"OpType,omitempty"`                   // 操作类型，1.碰、2.杠、3.胡、4.出牌
	HuType    HuType `protobuf:"varint,4,opt,name=HuType,proto3,enum=outer.HuType" json:"HuType,omitempty"` // 胡牌类型
	OpEndAt   int64  `protobuf:"varint,6,opt,name=OpEndAt,proto3" json:"OpEndAt,omitempty"`                 // 操作结束时间(毫秒)
}

func (x *MahjongBTEOperaNtf) Reset() {
	*x = MahjongBTEOperaNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mahjongBTE_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongBTEOperaNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongBTEOperaNtf) ProtoMessage() {}

func (x *MahjongBTEOperaNtf) ProtoReflect() protoreflect.Message {
	mi := &file_mahjongBTE_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongBTEOperaNtf.ProtoReflect.Descriptor instead.
func (*MahjongBTEOperaNtf) Descriptor() ([]byte, []int) {
	return file_mahjongBTE_proto_rawDescGZIP(), []int{19}
}

func (x *MahjongBTEOperaNtf) GetOpShortId() int64 {
	if x != nil {
		return x.OpShortId
	}
	return 0
}

func (x *MahjongBTEOperaNtf) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *MahjongBTEOperaNtf) GetHuType() HuType {
	if x != nil {
		return x.HuType
	}
	return HuType_HuTypeUnknown
}

func (x *MahjongBTEOperaNtf) GetOpEndAt() int64 {
	if x != nil {
		return x.OpEndAt
	}
	return 0
}

var File_mahjongBTE_proto protoreflect.FileDescriptor

var file_mahjongBTE_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x11, 0x6d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x03, 0x0a,
	0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x33, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x45, 0x78, 0x33, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x4f, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x11, 0x4d,
	0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x09, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x47, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x47, 0x61,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x47, 0x61,
	0x6e, 0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x47, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87,
	0x01, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54,
	0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x52,
	0x73, 0x70, 0x22, 0x43, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42,
	0x54, 0x45, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x61, 0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x61,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x47, 0x61,
	0x6e, 0x67, 0x22, 0x49, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a,
	0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x47,
	0x61, 0x6e, 0x67, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54,
	0x45, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4e, 0x74, 0x66, 0x22, 0x53, 0x0a, 0x19, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x29,
	0x0a, 0x11, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x61, 0x6c,
	0x4e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33,
	0x4e, 0x74, 0x66, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42,
	0x54, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x64, 0x4e, 0x74,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x68, 0x72, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x68, 0x6a, 0x6f,
	0x6e, 0x67, 0x42, 0x54, 0x45, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x4e, 0x74, 0x66, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67,
	0x42, 0x54, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x12, 0x3f, 0x0a,
	0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x4b,
	0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x11,
	0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x74,
	0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x48, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x12, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x42, 0x54, 0x45, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x4e, 0x74, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x48, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x48, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x48, 0x75, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4f, 0x70, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x08, 0x5a, 0x06, 0x2f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mahjongBTE_proto_rawDescOnce sync.Once
	file_mahjongBTE_proto_rawDescData = file_mahjongBTE_proto_rawDesc
)

func file_mahjongBTE_proto_rawDescGZIP() []byte {
	file_mahjongBTE_proto_rawDescOnce.Do(func() {
		file_mahjongBTE_proto_rawDescData = protoimpl.X.CompressGZIP(file_mahjongBTE_proto_rawDescData)
	})
	return file_mahjongBTE_proto_rawDescData
}

var file_mahjongBTE_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_mahjongBTE_proto_goTypes = []interface{}{
	(*MahjongBTEGameInfo)(nil),        // 0: outer.MahjongBTEGameInfo
	(*MahjongPlayerInfo)(nil),         // 1: outer.MahjongPlayerInfo
	(*Exchange3Info)(nil),             // 2: outer.Exchange3Info
	(*MahjongBTEExchange3Req)(nil),    // 3: outer.MahjongBTEExchange3Req
	(*MahjongBTEExchange3Rsp)(nil),    // 4: outer.MahjongBTEExchange3Rsp
	(*MahjongBTEDecideIgnoreReq)(nil), // 5: outer.MahjongBTEDecideIgnoreReq
	(*MahjongBTEDecideIgnoreRsp)(nil), // 6: outer.MahjongBTEDecideIgnoreRsp
	(*MahjongBTEDealReq)(nil),         // 7: outer.MahjongBTEDealReq
	(*MahjongBTEDealRsp)(nil),         // 8: outer.MahjongBTEDealRsp
	(*MahjongBTEOperateReq)(nil),      // 9: outer.MahjongBTEOperateReq
	(*MahjongBTEOperateRsp)(nil),      // 10: outer.MahjongBTEOperateRsp
	(*MahjongBTEReadyNtf)(nil),        // 11: outer.MahjongBTEReadyNtf
	(*MahjongBTEDecideMasterNtf)(nil), // 12: outer.MahjongBTEDecideMasterNtf
	(*MahjongBTEDealNtf)(nil),         // 13: outer.MahjongBTEDealNtf
	(*MahjongBTEExchange3Ntf)(nil),    // 14: outer.MahjongBTEExchange3Ntf
	(*MahjongBTEExchange3EndNtf)(nil), // 15: outer.MahjongBTEExchange3EndNtf
	(*MahjongBTEDecideIgnoreNtf)(nil), // 16: outer.MahjongBTEDecideIgnoreNtf
	(*MahjongBTEPlayingNtf)(nil),      // 17: outer.MahjongBTEPlayingNtf
	(*MahjongBTETurnNtf)(nil),         // 18: outer.MahjongBTETurnNtf
	(*MahjongBTEOperaNtf)(nil),        // 19: outer.MahjongBTEOperaNtf
	nil,                               // 20: outer.MahjongPlayerInfo.CardsPongEntry
	nil,                               // 21: outer.MahjongPlayerInfo.CardsGangEntry
	nil,                               // 22: outer.MahjongBTEPlayingNtf.ColorsEntry
	(MahjongBTEState)(0),              // 23: outer.MahjongBTEState
	(HuType)(0),                       // 24: outer.HuType
	(ColorType)(0),                    // 25: outer.ColorType
	(ActionType)(0),                   // 26: outer.ActionType
}
var file_mahjongBTE_proto_depIdxs = []int32{
	23, // 0: outer.MahjongBTEGameInfo.State:type_name -> outer.MahjongBTEState
	1,  // 1: outer.MahjongBTEGameInfo.Players:type_name -> outer.MahjongPlayerInfo
	2,  // 2: outer.MahjongBTEGameInfo.Ex3FromShortId:type_name -> outer.Exchange3Info
	24, // 3: outer.MahjongBTEGameInfo.HuType:type_name -> outer.HuType
	25, // 4: outer.MahjongPlayerInfo.DecideColor:type_name -> outer.ColorType
	20, // 5: outer.MahjongPlayerInfo.CardsPong:type_name -> outer.MahjongPlayerInfo.CardsPongEntry
	21, // 6: outer.MahjongPlayerInfo.CardsGang:type_name -> outer.MahjongPlayerInfo.CardsGangEntry
	25, // 7: outer.MahjongBTEDecideIgnoreReq.color:type_name -> outer.ColorType
	26, // 8: outer.MahjongBTEOperateReq.ActionType:type_name -> outer.ActionType
	22, // 9: outer.MahjongBTEPlayingNtf.Colors:type_name -> outer.MahjongBTEPlayingNtf.ColorsEntry
	26, // 10: outer.MahjongBTETurnNtf.ActionType:type_name -> outer.ActionType
	24, // 11: outer.MahjongBTETurnNtf.HuType:type_name -> outer.HuType
	24, // 12: outer.MahjongBTEOperaNtf.HuType:type_name -> outer.HuType
	25, // 13: outer.MahjongBTEPlayingNtf.ColorsEntry.value:type_name -> outer.ColorType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_mahjongBTE_proto_init() }
func file_mahjongBTE_proto_init() {
	if File_mahjongBTE_proto != nil {
		return
	}
	file_mahjongtype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mahjongBTE_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exchange3Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDealReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDealRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEReadyNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideMasterNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDealNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3Ntf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEExchange3EndNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEDecideIgnoreNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEPlayingNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTETurnNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mahjongBTE_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongBTEOperaNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mahjongBTE_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mahjongBTE_proto_goTypes,
		DependencyIndexes: file_mahjongBTE_proto_depIdxs,
		MessageInfos:      file_mahjongBTE_proto_msgTypes,
	}.Build()
	File_mahjongBTE_proto = out.File
	file_mahjongBTE_proto_rawDesc = nil
	file_mahjongBTE_proto_goTypes = nil
	file_mahjongBTE_proto_depIdxs = nil
}
