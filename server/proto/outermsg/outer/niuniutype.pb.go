// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: niuniutype.proto

package outer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 牛牛 扑克花色
type NiuNiuPokerColorType int32

const (
	NiuNiuPokerColorType_NiuNiuPokerUnknown NiuNiuPokerColorType = 0
	NiuNiuPokerColorType_NiuNiuClubs        NiuNiuPokerColorType = 1 // 梅花
	NiuNiuPokerColorType_NiuNiuDiamonds     NiuNiuPokerColorType = 2 // 方块
	NiuNiuPokerColorType_NiuNiuHearts       NiuNiuPokerColorType = 3 // 红心
	NiuNiuPokerColorType_NiuNiuSpades       NiuNiuPokerColorType = 4 // 黑桃
)

// Enum value maps for NiuNiuPokerColorType.
var (
	NiuNiuPokerColorType_name = map[int32]string{
		0: "NiuNiuPokerUnknown",
		1: "NiuNiuClubs",
		2: "NiuNiuDiamonds",
		3: "NiuNiuHearts",
		4: "NiuNiuSpades",
	}
	NiuNiuPokerColorType_value = map[string]int32{
		"NiuNiuPokerUnknown": 0,
		"NiuNiuClubs":        1,
		"NiuNiuDiamonds":     2,
		"NiuNiuHearts":       3,
		"NiuNiuSpades":       4,
	}
)

func (x NiuNiuPokerColorType) Enum() *NiuNiuPokerColorType {
	p := new(NiuNiuPokerColorType)
	*p = x
	return p
}

func (x NiuNiuPokerColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NiuNiuPokerColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_niuniutype_proto_enumTypes[0].Descriptor()
}

func (NiuNiuPokerColorType) Type() protoreflect.EnumType {
	return &file_niuniutype_proto_enumTypes[0]
}

func (x NiuNiuPokerColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NiuNiuPokerColorType.Descriptor instead.
func (NiuNiuPokerColorType) EnumDescriptor() ([]byte, []int) {
	return file_niuniutype_proto_rawDescGZIP(), []int{0}
}

// 牛牛 游戏状态机
type NiuNiuState int32

const (
	NiuNiuState_NiuNiuStateReady      NiuNiuState = 0 // 准备中状态
	NiuNiuState_NiuNiuStateDeal       NiuNiuState = 1 // 游戏开始发牌状态
	NiuNiuState_NiuNiuStateToBeMaster NiuNiuState = 2 // 抢庄状态
	NiuNiuState_NiuNiuStateBetting    NiuNiuState = 3 // 押注状态
	NiuNiuState_NiuNiuStateShowCards  NiuNiuState = 4 // 搓牌状态
	NiuNiuState_NiuNiuStateSettlement NiuNiuState = 5 // 结算
)

// Enum value maps for NiuNiuState.
var (
	NiuNiuState_name = map[int32]string{
		0: "NiuNiuStateReady",
		1: "NiuNiuStateDeal",
		2: "NiuNiuStateToBeMaster",
		3: "NiuNiuStateBetting",
		4: "NiuNiuStateShowCards",
		5: "NiuNiuStateSettlement",
	}
	NiuNiuState_value = map[string]int32{
		"NiuNiuStateReady":      0,
		"NiuNiuStateDeal":       1,
		"NiuNiuStateToBeMaster": 2,
		"NiuNiuStateBetting":    3,
		"NiuNiuStateShowCards":  4,
		"NiuNiuStateSettlement": 5,
	}
)

func (x NiuNiuState) Enum() *NiuNiuState {
	p := new(NiuNiuState)
	*p = x
	return p
}

func (x NiuNiuState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NiuNiuState) Descriptor() protoreflect.EnumDescriptor {
	return file_niuniutype_proto_enumTypes[1].Descriptor()
}

func (NiuNiuState) Type() protoreflect.EnumType {
	return &file_niuniutype_proto_enumTypes[1]
}

func (x NiuNiuState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NiuNiuState.Descriptor instead.
func (NiuNiuState) EnumDescriptor() ([]byte, []int) {
	return file_niuniutype_proto_rawDescGZIP(), []int{1}
}

// 牛牛 牌型
type NiuNiuPokerCardsType int32

const (
	NiuNiuPokerCardsType_NiuNiuPokerCardsTypeUnknown NiuNiuPokerCardsType = 0
	NiuNiuPokerCardsType_Niu1Type                    NiuNiuPokerCardsType = 1  // 牛1
	NiuNiuPokerCardsType_Niu2Type                    NiuNiuPokerCardsType = 2  // 牛2
	NiuNiuPokerCardsType_Niu3Type                    NiuNiuPokerCardsType = 3  // 牛3
	NiuNiuPokerCardsType_Niu4Type                    NiuNiuPokerCardsType = 4  // 牛4
	NiuNiuPokerCardsType_Niu5Type                    NiuNiuPokerCardsType = 5  // 牛5
	NiuNiuPokerCardsType_Niu6Type                    NiuNiuPokerCardsType = 6  // 牛6
	NiuNiuPokerCardsType_Niu7Type                    NiuNiuPokerCardsType = 7  // 牛7
	NiuNiuPokerCardsType_Niu8Type                    NiuNiuPokerCardsType = 8  // 牛8
	NiuNiuPokerCardsType_Niu9Type                    NiuNiuPokerCardsType = 9  // 牛9
	NiuNiuPokerCardsType_NiuNiuType                  NiuNiuPokerCardsType = 10 // 牛牛
	NiuNiuPokerCardsType_StraightNiuType             NiuNiuPokerCardsType = 11 // 顺子牛
	NiuNiuPokerCardsType_FiveColorNiuType            NiuNiuPokerCardsType = 12 // 五花牛
	NiuNiuPokerCardsType_SameColorNiuType            NiuNiuPokerCardsType = 13 // 同花牛
	NiuNiuPokerCardsType_HuluNiuType                 NiuNiuPokerCardsType = 14 // 葫芦牛
	NiuNiuPokerCardsType_BombNiuType                 NiuNiuPokerCardsType = 15 // 炸弹牛
	NiuNiuPokerCardsType_FiveSmallNiuType            NiuNiuPokerCardsType = 16 // 五小牛
	NiuNiuPokerCardsType_ColorStraightType           NiuNiuPokerCardsType = 17 // 同花顺
)

// Enum value maps for NiuNiuPokerCardsType.
var (
	NiuNiuPokerCardsType_name = map[int32]string{
		0:  "NiuNiuPokerCardsTypeUnknown",
		1:  "Niu1Type",
		2:  "Niu2Type",
		3:  "Niu3Type",
		4:  "Niu4Type",
		5:  "Niu5Type",
		6:  "Niu6Type",
		7:  "Niu7Type",
		8:  "Niu8Type",
		9:  "Niu9Type",
		10: "NiuNiuType",
		11: "StraightNiuType",
		12: "FiveColorNiuType",
		13: "SameColorNiuType",
		14: "HuluNiuType",
		15: "BombNiuType",
		16: "FiveSmallNiuType",
		17: "ColorStraightType",
	}
	NiuNiuPokerCardsType_value = map[string]int32{
		"NiuNiuPokerCardsTypeUnknown": 0,
		"Niu1Type":                    1,
		"Niu2Type":                    2,
		"Niu3Type":                    3,
		"Niu4Type":                    4,
		"Niu5Type":                    5,
		"Niu6Type":                    6,
		"Niu7Type":                    7,
		"Niu8Type":                    8,
		"Niu9Type":                    9,
		"NiuNiuType":                  10,
		"StraightNiuType":             11,
		"FiveColorNiuType":            12,
		"SameColorNiuType":            13,
		"HuluNiuType":                 14,
		"BombNiuType":                 15,
		"FiveSmallNiuType":            16,
		"ColorStraightType":           17,
	}
)

func (x NiuNiuPokerCardsType) Enum() *NiuNiuPokerCardsType {
	p := new(NiuNiuPokerCardsType)
	*p = x
	return p
}

func (x NiuNiuPokerCardsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NiuNiuPokerCardsType) Descriptor() protoreflect.EnumDescriptor {
	return file_niuniutype_proto_enumTypes[2].Descriptor()
}

func (NiuNiuPokerCardsType) Type() protoreflect.EnumType {
	return &file_niuniutype_proto_enumTypes[2]
}

func (x NiuNiuPokerCardsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NiuNiuPokerCardsType.Descriptor instead.
func (NiuNiuPokerCardsType) EnumDescriptor() ([]byte, []int) {
	return file_niuniutype_proto_rawDescGZIP(), []int{2}
}

var File_niuniutype_proto protoreflect.FileDescriptor

var file_niuniutype_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6e, 0x69, 0x75, 0x6e, 0x69, 0x75, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2a, 0x77, 0x0a, 0x14, 0x4e, 0x69, 0x75,
	0x4e, 0x69, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x69, 0x75,
	0x4e, 0x69, 0x75, 0x43, 0x6c, 0x75, 0x62, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x69,
	0x75, 0x4e, 0x69, 0x75, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x48, 0x65, 0x61, 0x72, 0x74, 0x73, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x53, 0x70, 0x61, 0x64, 0x65, 0x73,
	0x10, 0x04, 0x2a, 0xa0, 0x01, 0x0a, 0x0b, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x69, 0x75, 0x4e,
	0x69, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x69, 0x75, 0x4e,
	0x69, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x69,
	0x75, 0x4e, 0x69, 0x75, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x2a, 0xd5, 0x02, 0x0a, 0x14, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x31, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x69, 0x75, 0x32, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x69, 0x75, 0x33, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75,
	0x34, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x35, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x36, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x37, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x38, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x69, 0x75, 0x39, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x69, 0x75, 0x4e, 0x69, 0x75, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x69, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e,
	0x69, 0x75, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x75, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0d, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x75, 0x6c, 0x75, 0x4e, 0x69, 0x75, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0e, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x6f, 0x6d, 0x62, 0x4e, 0x69, 0x75, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0f,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x76, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4e, 0x69, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x11, 0x42, 0x08, 0x5a,
	0x06, 0x2f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_niuniutype_proto_rawDescOnce sync.Once
	file_niuniutype_proto_rawDescData = file_niuniutype_proto_rawDesc
)

func file_niuniutype_proto_rawDescGZIP() []byte {
	file_niuniutype_proto_rawDescOnce.Do(func() {
		file_niuniutype_proto_rawDescData = protoimpl.X.CompressGZIP(file_niuniutype_proto_rawDescData)
	})
	return file_niuniutype_proto_rawDescData
}

var file_niuniutype_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_niuniutype_proto_goTypes = []interface{}{
	(NiuNiuPokerColorType)(0), // 0: outer.NiuNiuPokerColorType
	(NiuNiuState)(0),          // 1: outer.NiuNiuState
	(NiuNiuPokerCardsType)(0), // 2: outer.NiuNiuPokerCardsType
}
var file_niuniutype_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_niuniutype_proto_init() }
func file_niuniutype_proto_init() {
	if File_niuniutype_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_niuniutype_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_niuniutype_proto_goTypes,
		DependencyIndexes: file_niuniutype_proto_depIdxs,
		EnumInfos:         file_niuniutype_proto_enumTypes,
	}.Build()
	File_niuniutype_proto = out.File
	file_niuniutype_proto_rawDesc = nil
	file_niuniutype_proto_goTypes = nil
	file_niuniutype_proto_depIdxs = nil
}
