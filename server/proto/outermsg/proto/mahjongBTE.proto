syntax = "proto3";
package outer;
option  go_package = "/outer";

import "mahjongtype.proto";

// 麻将-血战到底 协议 (Mahjong-Battle to the End)

// 血战到底 游戏数据
message MahjongBTEGameInfo {
    MahjongBTEState            State            = 1; // 当前状态
    int64                      StateEnterAt     = 2; // 当前状态的进入时间(毫秒)
    int64                      StateEndAt       = 3; // 当前状态的结算时间(毫秒)
    repeated MahjongPlayerInfo Players          = 4; // 东南西北 四方玩家信息
    repeated int32             Dices            = 5; // 定庄的2颗骰子数
    int32                      MasterIndex      = 6; // 庄家位置 东南西北(0-3)
    Exchange3Info              Ex3FromShortId   = 7; // 换三张数据
    int32                      TotalCardsCount  = 8; // 剩余总牌数
    repeated int32             Cards            = 9; // 打出去的所有牌
    int64                      ActionShortId    = 10; // 当前操作者
    int64                      ActionEndAt      = 11; // 操作结束时间(毫秒)
    // 以下数据只发操作者本人
    repeated ActionType ActionType              = 12; // 可操作类型，1.碰、2.杠、3.胡、4.出牌
    repeated HuType     HuType                  = 13; // 可胡牌的类型
    repeated int32      GangCards               = 14; // 可杠的牌 出牌时，手牌中可能已经存在多副杠牌
    int32               NewCard                 = 15; // 摸得的牌
}

// 血战到底 参与游戏的玩家数据
message MahjongPlayerInfo {
    int64      ShortId       = 1; // 参与者短ID
    ColorType  DecideColor   = 2; // 定缺花色
    CardsOfBTE AllCards      = 3; // 玩家的所有牌，手牌、碰、杠
}

// 血战到底 换三张数据
message Exchange3Info {
    repeated int32 CardsFrom     = 1; // 得到的牌
    int32          FromSeatIndex = 2; // 谁给的

    repeated int32 CardsTo       = 3; // 给出去的牌
    int32          ToSeatIndex   = 4; // 给谁
}

// 血战到底 牌数据
message CardsOfBTE {
    repeated int32 Cards           = 1; // 手牌 (萬11-19 条21-29 筒31-39)
    map<int32,int64> LightGang     = 2; // 明杠
    map<int32,int64> DarkGang      = 3; // 暗杠
    map<int32,int64> Pong          = 4; // 碰
}
////////////////////////////////////////////// 游戏操作请求 //////////////////////////////////////////////
// 换三张确定
message MahjongBTEExchange3Req {
    repeated int32 Index = 1; // 13张牌下标 0~12
}
message MahjongBTEExchange3Rsp {
}

// 定缺确定
message MahjongBTEDecideIgnoreReq {
    ColorType color = 1;
}
message MahjongBTEDecideIgnoreRsp {
}

// 出牌
message MahjongBTEPlayCardReq {
    int32 Index = 1;// 手牌下标 0开始
}
message MahjongBTEPlayCardRsp {
    CardsOfBTE AllCards = 1; // 玩家的所有牌，手牌、碰、杠
}

// 执行操作 过、碰、杠、胡
message MahjongBTEOperateReq {
    ActionType ActionType = 1;
    HuType     Hu         = 2; // 胡的牌型
    int32      Gang       = 3; // 杠的牌
}
message MahjongBTEOperateRsp {
    CardsOfBTE AllCards  = 1; // 玩家的所有牌，手牌、碰、杠
}


////////////////////////////////////////////// 游戏通知 //////////////////////////////////////////////
// 进入准备中，（结算结束后会通知）
message MahjongBTEReadyNtf {
}

// 开始定庄
message MahjongBTEDecideMasterNtf {
    repeated int32 Dices       = 1; // 两颗骰子数
    int32          MasterIndex = 2; // 庄家位置 0,1,2,3
}

// 开始发牌通知
message MahjongBTEDealNtf {
    repeated int32 Cards   = 1; // 手牌 (萬11-19 条21-29 筒31-39)
}

// 开始换三张
message MahjongBTEExchange3Ntf {
}

// 换三张结束
message MahjongBTEExchange3EndNtf {
    Exchange3Info  Ex3Info      = 1; // 换牌信息
    repeated int32 Cards        = 2; // 最新手牌 (萬11-19 条21-29 筒31-39)
}

// 开始定缺通知
message MahjongBTEDecideIgnoreNtf {
}

// 定缺结束
message MahjongBTEDecideIgnoreEndNtf {
    map<int64, ColorType> Colors = 1; // 每位玩家的定缺花色 map<短ID，定缺花色>
}

// 开始游戏通知
message MahjongBTEPlayingNtf {
}

// 玩家轮动通知
message MahjongBTETurnNtf {
    int32      TotalCards          = 1; // 剩余总牌数
    int64      ActionShortId       = 2; // 操作者
    int64      ActionEndAt         = 3; // 操作结束时间(毫秒)
    // 以下数据只发操作者本人
    repeated ActionType ActionType = 4; // 可操作类型，1.碰、2.杠、3.胡、4.出牌
    repeated HuType     HuType     = 5; // 可胡牌的类型
    repeated int32      GangCards  = 6; // 可杠的牌 出牌时，手牌中可能已经存在多副杠牌
    int32               NewCard    = 7; // 摸牌
}

// 玩家操作结果通知
message MahjongBTEOperaNtf {
    int64  OpShortId    = 1; // 操作者
    ActionType OpType   = 3; // 操作类型，1.碰、2.杠、3.胡、4.出牌
    HuType HuType       = 4; // 胡牌类型
    int32  Card         = 5; // 碰、杠、出牌的牌
}

// 结算通知
message MahjongBTESettlementNtf {
    // TODO
}
