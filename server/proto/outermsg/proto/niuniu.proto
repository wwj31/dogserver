syntax = "proto3";
package outer;
option  go_package = "/outer";

import "niuniutype.proto";

// 牛牛 协议 (NiuNiu)

// 牛牛 游戏数据
message NiuNiuGameInfo {
    NiuNiuState                 State            = 1; // 当前状态
    int64                       StateEnterAt     = 2; // 当前状态的进入时间(毫秒)
    int64                       StateEndAt       = 3; // 当前状态的结束时间(毫秒)
    repeated NiuNiuPlayerInfo   Players          = 4; // 分别代表座位的玩家,固定发10个位置 下标内容空表示无人
    int32                       MasterIndex      = 5; // 庄家位置
    map<int32,int32>            MasterTimes      = 6; // 每个人的抢庄倍数<位置，倍数>
    map<int32,int64>            BetGold          = 7; // 每个人的押注金币<位置，金币>
    NiuNiuSettlementNtf         Settlement       = 8; // 结算数据，仅在结算状态进入房间会发
}

// 牛牛 参与游戏的玩家数据
message NiuNiuPlayerInfo {
    int64               ShortId        = 1; // 参与者短ID
    bool                Ready          = 2; // true.准备、false.未准备
    int64               ReadyExpireAt  = 3; // 准备超时时间(毫秒)
    int32               GameCount      = 4; // 游戏局数

    // 手牌 (梅花101-113 方块201-213 红心301-313 黑桃401-413 小王516 大王517)
    // NOTE: 401:黑桃A 402:黑桃2 411:黑桃J 412:黑桃Q 413:黑桃K 其他花色同理
    repeated int32      HandCards      = 5;

    int64               Score          = 6;// 玩家本局拥有的分数
    bool                CanPushBet     = 7; // 本次押注能否推注
}

// 牌型数据
message NiuNiuCardsGroup {
    // NOTE: 主牌和副牌比起手牌有以下区别:
    // 1.主、副牌中，一定不会包含大小王,王会被替换成充当的牌
    // 2.主、副牌中有两种A(手牌里只会出现一种的A), 比如 401和414都表示黑桃A,不同牌型A点数不同，例:A2345中的A是1点，10JQKA中的A是14点，炸弹牛、葫芦牛同理

    NiuNiuPokerCardsType Type  = 1;// 牌型
    repeated int32 Cards       = 2;// 主牌
    repeated int32 SideCards   = 3;// 副牌
}

////////////////////////////////////////////// 游戏操作请求 //////////////////////////////////////////////

// 抢庄操作
message NiuNiuToBeMasterReq {// tag:gambling
    int32 Times = 1; // 抢庄倍数,发几就是几倍 0.不抢
}
message NiuNiuToBeMasterRsp {
}

// 闲家下注
message NiuNiuToBettingReq {// tag:gambling
    float Gold = 1; // 根据底分和选择的倍数，把押注的金额发过来,（不用扩大1000倍数）
}
message NiuNiuToBettingRsp {
}

// 亮牌
message NiuNiuShowCardsReq {// tag:gambling
}
message NiuNiuShowCardsRsp {
}
////////////////////////////////////////////// 游戏通知 //////////////////////////////////////////////
// 进入准备中，（房间初始状态， 结算结束后会通知）
message NiuNiuReadyNtf {
}

// 开始准备倒计时通知
message NiuNiuStartCountDownNtf {
    int64 ExpireAt = 1;// 满足人数后，进入发牌的时间(毫秒)
}

// 停止准备倒计时通知
message NiuNiuStopCountDownNtf {
}

// 开始发牌通知
message NiuNiuDealNtf {
    repeated int32 HandCards  = 1; // 手牌
}

// 开始抢庄状态通知
message NiuNiuMasterNtf {
    int64 ExpireAt = 1;// 抢庄结束时间(毫秒)
}

// 抢庄操作广播
message NiuNiuSelectMasterNtf {
    int64 ShortId = 1;
    int32 Times   = 2; // 抢庄倍数
}

// 开始押注状态通知
message NiuNiuBettingNtf {
    int64 ExpireAt                 = 1; // 押注结束时间(毫秒)
    int32 MasterSeat               = 2; // 抢庄结束后，确定的庄家位置
    map<int32,int64> CanPushSeats  = 3; // <可推注的位置，上一把赢的金额>
}

// 押注操作广播
message NiuNiuSelectBettingNtf {
    int64 ShortId = 1;
    int64 Gold    = 2; // 押注分数
}

// 进入搓牌状态通知
message NiuNiuShowCardsNtf {
    int64          ExpireAt   = 1;// 押注结束时间(毫秒)
    repeated int32 HandCards  = 2; // 自己的最新手牌
}

// 亮牌通知
message NiuNiuFinishShowCardsNtf {
    int64 ShortId             = 1; // 亮牌的玩家
    repeated int32 HandCards  = 2; // 自己的最新手牌
}


// 全部亮牌结算通知
message NiuNiuSettlementNtf {
    int64    GameSettlementAt             = 1; // 结算开始时间
    int64    EndAt                        = 2; // 结算结束时间
    repeated NiuNiuPlayerInfo players     = 3; // 亮牌后的信息
    map<int32,int64> WinScores            = 4; // 每个位置的玩家总输赢,正数是赢，负数是输
    map<int32,NiuNiuCardsGroup> CardsTypes = 5; // 每个位置的牌型分析
}