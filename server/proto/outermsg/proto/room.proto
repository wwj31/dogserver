syntax = "proto3";
package outer;
option  go_package = "/outer";

import "base.proto";
import "type.proto";
import "msgid.proto";

// 房间内玩家数据
message RoomPlayerInfo {
    int32      SeatIndex = 1; // 座位 0，1，2，3...
    PlayerInfo BaseInfo  = 2; // 玩家基础信息
    int64      EnterAt   = 4; // 进入房间的时间(毫秒)
}

// 房间信息
message RoomInfo {
    int64      RoomId               = 1;
    GameType   GameType             = 2;
    GameParams GameParams           = 3;
    repeated RoomPlayerInfo Players = 4; // 房间内的成员信息
}

// 创建房间 (以后将不再开放此接口，统一走自动创建房间的接口)
message CreateRoomReq {// tag:player
    GameType GameType     = 1;
    GameParams GameParams = 2; // 游戏参数
}
message CreateRoomRsp {
    RoomInfo Room = 1;
}

////////////////////////// 自动创建房间相关操作 /////////////////////////////////
message Manifest{
    string Id             = 1; // 清单唯一id
    GameType GameType     = 2; //
    GameParams GameParams = 3;
}

// 申请 自动创建房间参数清单
message SetRoomManifestReq {// tag:player
    string   Id           = 1; // 修改需要传，创建不用传
    GameType GameType     = 2;
    GameParams GameParams = 3; // 游戏参数
}

message SetRoomManifestRsp {
    Manifest Info = 1; // 申请成功的清单信息
}

// 获得 自动创建房间参数清单 列表
message RoomManifestListReq {// tag:player
    GameType GameType     = 1;
}
message RoomManifestListRsp {
    repeated Manifest Manifests = 1;
}

// 删除清单
message PruneRoomManifestReq {// tag:player
    string   Id           = 1; // 清单id
}

message PruneRoomManifestRsp {
}

/////////////////////////////////////////////////////////////////////////////////

// 解散房间
message DisbandRoomReq {// tag:player
    int64 RoomId = 1;
}
message DisbandRoomRsp {
    int64 RoomId = 1;
}

// 房间列表
message RoomListReq {// tag:player
}
message RoomListRsp {
    repeated RoomInfo RoomList = 1;
}

// 加入房间
message JoinRoomReq {// tag:player
    int64 RoomId = 1;
}
message JoinRoomRsp {
    RoomInfo Room         = 1; // 房间基础信息
    bytes    GamblingData = 2; // 房间游戏数据
}

// 离开房间
message LeaveRoomReq {// tag:player
}
message LeaveRoomRsp {
}


// 通知类消息
message RoomPlayerEnterNtf {// 房间进入新玩家通知
    RoomPlayerInfo Player   = 1;
}
message RoomPlayerLeaveNtf {// 房间内玩家离开通知
    int64 ShortId = 1;
}
message RoomPlayerOnlineNtf {// 房间内玩家上、下线通知
    int64 ShortId = 1;
    bool  Online  = 2; // true在线、false离线
}


// 回放记录消息
message RecordingMessage {
    int64 SendAt  = 1; // 发送时间
    int64 ShortId = 2; // 接收消息的对象
    Msg   MsgId   = 3; // 消息id
    bytes Data    = 4; // 消息内容
}

// 回放数据
message Recording {
    int64 GameStartAt                  = 1; // 游戏开始时间(准备结束后开始游戏的时刻 毫秒)
    int64 GameOverAt                   = 2; // 游戏结束时间(结算结束的时刻 毫秒)
    RoomInfo Room                      = 3; // 房间基础信息
    repeated RecordingMessage Messages = 4; // 回放消息队列
}

// 请求游戏数据回播数据
message RoomRecordingReq {// tag:player
    int64 RoomId      = 1; // 房间id
    int64 GameStartAt = 2; // 要看的那局游戏开始时间
}
message RoomRecordingRsp {
    Recording GameRecordData = 1; // 游戏回放记录
}

// 游戏历史基础信息
message HistoryInfo {
    int32 GameType    = 1; // 游戏类型
    int64 RoomId      = 2; // 房间Id
    int64 GameStartAt = 3; // 游戏开始时间
    int64 GameOverAt  = 4; // 游戏结束时间
    int64 BaseScore   = 5; // 游戏底分
    int64 WinGold     = 6; // 产生的金币变化(负为数，正为赢)
}

// 获得游戏历史战绩列表
message RoomGamblingHistoryReq {// tag:player
}
message RoomGamblingHistoryRsp {
    repeated HistoryInfo list = 1; // 时间大到小排序
}
